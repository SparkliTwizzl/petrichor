@ECHO OFF
SET debug=true
IF %debug%==true (
    @ECHO ON
)

SET version=0.1

REM LICENSE INFORMATION
REM this script is voluntarily released into the public domain via the Creative Commons Zero License (https://creativecommons.org/share-your-work/public-domain/cc0/):
REM To the extent possible under law, SparkliTwizzl has waived all copyright and related or neighboring rights to this file. This work is published from: United States.


CALL :Init isLoggingEnabled
ECHO isLoggingEnabled=%isLoggingEnabled%
PAUSE
CALL :ReadInputData
CALL :ParseInputData 0
CALL :WriteOutput
PAUSE
EXIT



:GetDateYYYYMMDD
FOR /f "skip=1 tokens=1-6" %%a IN ('WMIC PATH Win32_LocalTime GET DAY^,HOUR^,MINUTE^,MONTH^,SECOND^,YEAR /FORMAT:TABLE') DO (
    IF NOT "%%b"=="" (
        SET /a _date=%%f*10000+%%d*100+%%a
    )
)
SET _date=%_date%
EXIT /b



:GetDateYYYY_MM_DD
CALL :GetDateYYYYMMDD
SET _date=%_date:~0,4%-%_date:~4,2%-%_date:~6,2%
EXIT /b



:GetTimeHHMMSS
SET _time=%TIME: =0%
SET _time=%_time:~0,2%%_time:~3,2%%_time:~6,2%
EXIT /b



:GetTimeHH_MM_SS
SET _time=%TIME: =0%
SET _time=%_time:~0,8%
EXIT /b



:Init <isLoggingEnabled>
REM newline hack to allow single-echo line breaks
REM note: must be used as !nl!, not %nl%, since it relies on delayed expansion
SETLOCAL EnableDelayedExpansion
(SET nl=^
%=intentionallyEmpty=%
)

SET inputFile=./testInput.akf
IF NOT "%~f1"=="" (
    SET inputFile=%~f1
)
SET outputFile=./testOutput.ahk
IF NOT "%~f2"=="" (
    SET outputFile=%~f2
)

CALL :GetDateYYYY_MM_DD
CALL :GetTimeHH_MM_SS
ECHO ;generated by %~nx0 v%version% on %_date% %_time%!nl!>%outputFile%

SET isLoggingEnabled=false
IF %debug%==true (
    SET isLoggingEnabled=true
)
IF "%3"=="-l" (
    SET isLoggingEnabled=true
)
IF %isLoggingEnabled%==true (
    CALL :InitLogging
)
SET "%~1=%isLoggingEnabled%"
ECHO %~1
PAUSE
EXIT /b



:InitLogging
IF NOT EXIST log (
    MKDIR log
)
CALL :GetDateYYYYMMDD
CALL :GetTimeHHMMSS
SET logFile=./log/%~n0_%_date%_%_time%.log
CALL :GetDateYYYY_MM_DD
CALL :GetTimeHH_MM_SS
ECHO %~nx0 v%version% run on %_date% %_time%>%logFile%
EXIT /b



:Log <logString>
ECHO Log isLoggingEnabled=%isLoggingEnabled%
IF %isLoggingEnabled%==true (
    ECHO %~1>>%logFile%
)
EXIT /b



:ParseEntry <lineIndex>
SET /a lineIndex=%1%
CALL :Log "ParseEntry lineIndex=%lineIndex%"
FOR /l %%i IN (%lineIndex% 1 %endIndex%) DO (
    IF "!inputData[%%i]!"=="}" (
        EXIT /b %%i
    )
)
EXIT /b



:ParseInputData <lineIndex>
SET /a lineIndex=%1%
CALL :Log "ParseInputData lineIndex=%lineIndex%"
IF %lineIndex%==%inputDataLineCount% (
    EXIT /b
)

IF "!inputData[%lineIndex%]!"=="{" (
    CALL :ParseEntry %lineIndex%+1 & SET /a %lineIndex%=!errorlevel!
) ELSE (
    CALL :Log "data parse error"
    EXIT /b
)
CALL :ParseInputData %lineIndex%+1
EXIT /b



:ReadInputData
CALL :Log "ReadInputData"
SET inputDataLineCount=0
FOR /f "tokens=*" %%x IN (%inputFile%) DO (
    SET inputData[!inputDataLineCount!]=%%x
    SET /a inputDataLineCount+=1
)
EXIT /b



:WriteOutput
CALL :Log "WriteOutput"
EXIT /b
