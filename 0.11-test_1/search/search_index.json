{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Petrichor /\u02c8p\u025btr\u026a\u02cck\u0254\u02d0r/ (noun) The scent of damp earth, particularly after rain. Part of the Trioxichor project."},{"location":"index.html#about","title":"About","text":"<p>Petrichor is a command-line app with modules for various utilities.</p> <p>Source code and releases are on GitHub.</p> <p>Petrichor is licensed under the Anti-Exploitation License Noncommercial Attribution v1.1 (AEL-NC-AT 1.1). By using this project or its source material, you agree to abide by the terms of this license.</p>"},{"location":"index.html#i-think-i-found-a-bug-i-have-an-idea-for-the-project","title":"I think i found a bug / I have an idea for the project","text":"<p>Report bugs and make suggestions on the GitHub issues board.</p> <p>If there's a dead link in this documentation, please report it so it can be fixed.</p> <p>In order for developers to find bugs easier, please describe what you were doing in as much detail as you're able to (Even better, write steps to reproduce the issue), say what you expected to happen, say what actually happened, and if you can, include the input, output, and log files.</p>"},{"location":"about/license.html","title":"License","text":"Petrichor Copyright (c) 2024 SparkliTwizzl Anti-Exploitation License Noncommmercial Attribution v1.1 (AEL-NC-AT 1.1) <p>This is an anti-capitalist, anti-fascist, anti-bigotry, pro-human-rights project, released for free use by individuals and organizations who are tired of ill-intentioned entities exploiting their work for free and/or using their work for malicious purposes, and would rather not have such entities use or interact with their creations.</p> <p>Permission is hereby granted, free of charge, by the creators (the \"Authors\") of this project and associated documentation files (the \"Project\"), to any person or organization (the \"User\") obtaining a copy of the Project, to use, modify, and distribute, for personal or educational purposes, subject to the following conditions:</p> <ol> <li> <p>All copies or modified versions of the Project shall include:</p> <ul> <li>A. The above copyright notice.</li> <li>B. This permission notice.</li> <li>C. Attribution of the Project to the Authors.</li> <li>D. A disclaimer that the Authors are not affiliated with the User, and the Authors do not endorse the User's use or modification of the Project.</li> </ul> </li> <li> <p>The User is one of the following:</p> <ul> <li>A. An individual person, laboring for themself.</li> <li>B. A non-profit organization.</li> <li>C. An educational institution.</li> <li>D. An organization that seeks shared profit for all of its members, and allows non-members to set the cost of their labor.</li> </ul> </li> <li> <p>If the User is an organization with owners, then all owners are workers and all workers are owners with equal equity and/or equal vote.</p> </li> <li> <p>If the User is an organization, then the User is not law enforcement or military, or working for or under either.</p> </li> <li> <p>The user does not use the Project for ill-intentioned and/or malicious reasons, as determined by the Authors. Said reasons include but are not limited to:</p> <ul> <li>A. Bigotry, including but not limited to: racism; xenophobia; homophobia; transphobia; ableism; ageism; sexism; antisemitism; zionism; religious intolerance.</li> <li>B. Exploitation of entities not capable of giving informed consent, including but not limited to: pedophilia; zoophilia.</li> <li>C. Support for law enforcement and/or the military, including but not limited to: police; carceral institutions; immigration enforcement.</li> <li>D. Any purpose utilizing and/or relating to blockchain technology, including but not limited to: cryptocurrencies; non-fungible tokens (\"NFT\"s).</li> <li>E. Any purpose intended to prevent knowledge and/or use of technologies and/or information which could benefit humankind, including but not limited to: strategic lawsuits against public participation (\"SLAPP suits\"); unjustified legal action for the purposes of forcing compliance and/or nonopposition; indefinite holding of patents without allowing for their use (\"patent-squatting\").</li> </ul> </li> <li> <p>The User attests their agreement to the following:</p> <ul> <li>A. Condemnation of the unlawful invasion and/or occupancy of sovereign states, including but not limited to that of Ukraine by Russia.</li> <li>B. Condemnation of all forms of genocide against any peoples for any reason, including but not limited to that of the Rohingya people in Myanman; the people of Palestine/Gaza; the Darfuris of South Sudan.</li> <li>C. Condemnation of all forms of slavery, servitude, and/or forced labor, including but not limited to: subjugation and exploitation under threat of violence or other harm; unlawful child labor; forced, uncompensated, and/or undercompensated prisoner labor.</li> <li>D. Transgender, nonbinary, and/or otherwise LGBTQIA+/queer people are people, rights for LGBTQIA+/queer people are human rights which benefit all people, and LGBTQIA+/queer people are fully capable of making decisions about their own lives.</li> <li>E. Autistic and/or otherwise neurodiverse people are people, rights for neurodiverse people are human rights which benefit all people, and neurodiverse people are fully capable of making decisions about their own lives.</li> <li>F. Disabled and/or otherwise differently abled people are people, rights for differently abled people are human rights which benefit all people, and differently abled people are fully capable of making decisions about their own lives.</li> </ul> </li> <li> <p>The User does not engage in and/or promote any of the activities listed in Item 5, and is not affiliated with any group and/or organization that engages in and/or promotes any of such activities. The User does not behave in a manner counter to the priciples listed in Item 6, and is not affiliated with any group and/or organization that behaves in a manner counter to such principles.</p> </li> <li> <p>The User does not resell the Project or any part of the Project.</p> </li> </ol> <p>The Project is provided \"as is\", without express or implied warranty of any kind, including but not limtied to the warranties of: merchantability; fitness for a particular purpose; noninfringement. In no event shall the Authors be liable for any claim; damages; or other liability, whether in action of contract; tort; or otherwise, arising from; out of; or in connection with, the Project; or the use of or dealings in the Project.</p>"},{"location":"user-guide/getting-started/index.html","title":"Getting started","text":"Getting started"},{"location":"user-guide/getting-started/index.html#petrichor-script","title":"Petrichor Script","text":"<p>Petrichor uses input files written with Petrichor Script. See documentation for how to use it.</p>"},{"location":"user-guide/getting-started/index.html#command-usage","title":"Command usage","text":"<p>Petrichor is run from the command line. See documentation for how to do so.</p>"},{"location":"user-guide/getting-started/index.html#modules","title":"Modules","text":"<p>Petrichor consists of modules for various utilities.</p> <p>Each module has unique input and command syntax following a common structure.</p>"},{"location":"user-guide/getting-started/command-usage.html","title":"Command usage - Getting started","text":"Command usage Getting started"},{"location":"user-guide/getting-started/command-usage.html#commands","title":"Commands","text":"<p>Petrichor modules each have a corresponding command to trigger them.</p> <p>These can be given as command line arguments, or they can be put into your input file and Petrichor will attempt to read ane execute them automatically.</p>"},{"location":"user-guide/getting-started/command-usage.html#default-command","title":"Default command","text":"<p>You can run Petrichor without passing it a command if you put the command in your input file and pass the input file as an argument when you run it.</p> <p>You can also just drag-and-drop the input file onto the executable ( <code>.exe</code> file ).</p> <p>If no arguments are provided, you will be prompted to use the <code>--help</code> option to see usage and available commands.</p>"},{"location":"user-guide/getting-started/command-usage.html#command-options","title":"Command options","text":"<p>Commands can have their behavior modified with options.</p> <p>Some commands have unique options.</p>"},{"location":"user-guide/getting-started/command-usage.html#input-file-option","title":"Input file option","text":"<p>(OPTIONAL)</p> <p>Command line syntax: <code>--inputFile [argument]</code></p> <p>Petrichor Script syntax: <code>input-file : [argument]</code></p> <p>The <code>input file</code> option allows you to specify the input file directory and/or name.</p> <p>If there are spaces in the argument, it must be surrounded by quotes ( <code>\"</code> ).</p> <p>You must include the file extension if you provide a file name.</p> <p>Relative file paths can be used.</p> <p>If you only provide the directory, <code>input.petrichor</code> will be used as the file name.</p> <p>If you only provide the file name, <code>[install path]\\Petrichor\\</code> will be used as the directory.</p> <p>Example (File name only, default directory):</p> <pre><code>Command line:      Petrichor.exe commandName --inputFile \"inputFile.txt\"\nPetrichor Script:  input-file : \"inputFile.txt\"\n</code></pre> <p>Petrichor will look for <code>[install path]\\Petrichor\\inputFile.txt</code>.</p> <p>Example (Directory only, default file name):</p> <pre><code>Command line:      Petrichor.exe commandName --inputFile \"[path]\\\"\nPetrichor Script:  input-file : \"[path]\\\"\n</code></pre> <p>Petrichor will look for <code>[path]\\input.petrichor</code>.</p> <p>Example (Full file path):</p> <pre><code>Command line:      Petrichor.exe commandName --inputFile \"[path]\\inputFile.txt\"\nPetrichor Script:  input-file : \"[path]\\inputFile.txt\"\n</code></pre> <p>Petrichor will look for <code>[path]\\inputFile.txt</code>.</p>"},{"location":"user-guide/getting-started/command-usage.html#output-file-option","title":"Output file option","text":"<p>(OPTIONAL)</p> <p>Command line syntax: <code>--outputFile [argument]</code></p> <p>Petrichor script syntax: <code>output-file : [argument]</code></p> <p>The <code>output file</code> option the output file directory and/or name for commands which generate files.</p> <p>If there are spaces in the argument, it must be surrounded by quotes ( <code>\"</code> ).</p> <p>A file extension may or may not be required. In some cases it may be overridden by a module.</p> <p>Relative file paths can be used.</p> <p>If you only provide the directory, <code>output.[extension]</code> will be used as the file name.</p> <p>If you only provide the file name, <code>[install path]\\Petrichor\\_output\\</code> will be used as the directory.</p> <p>Example (File name only, default directory):</p> <pre><code>Command line:      Petrichor.exe commandName --outputFile \"outputFile\"\nPetrichor Script:  output-file : \"outputFile\"\n</code></pre> <p>Petrichor will generate the file <code>[install path]\\Petrichor\\_output\\outputFile.[extension]</code>.</p> <p>Example (Directory only, default file name):</p> <pre><code>Command line:      Petrichor.exe commandName --outputFile \"[path]\\output\\\"\nPetrichor Script:  output-file : \"[path]\\output\\\"\n</code></pre> <p>Petrichor will generate the file <code>[path]\\output\\output.[extension]</code>.</p> <p>Example (Full file path):</p> <pre><code>Command line:      Petrichor.exe commandName --outputFile \"[path]\\outputFile\"\nPetrichor Script:  output-file : \"[path]\\outputFile\"\n</code></pre> <p>Petrichor will generate the file <code>[path]\\outputFile.[extension]</code>.</p>"},{"location":"user-guide/getting-started/command-usage.html#log-mode-option","title":"Log mode option","text":"<p>(OPTIONAL)</p> <p>Command line syntax: <code>--logMode [argument]</code></p> <p>Petrichor Script syntax: <code>log-mode : [argument]</code></p> <p>The <code>log mode</code> option is used to control where logs are sent.</p> <p>Allowed values:</p> <ul> <li><code>all</code> (DEFAULT) - Send logs to all output locations.</li> <li><code>fileOnly</code> - Send logs only to log file.</li> <li><code>consoleOnly</code> - Send logs only to console output.</li> <li><code>none</code> - Disable logging.</li> </ul> <p>Example:</p> <pre><code>Command line:      Petrichor.exe comandName --logMode [all | fileOnly | consoleOnly | none]\nPetrichor Script:  log-file : [all | fileOnly | consoleOnly | none]\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#log-file-option","title":"Log file option","text":"<p>(OPTIONAL)</p> <p>Command line syntax: <code>--logFile [argument]</code></p> <p>Petrichor Script syntax: <code>log-file : [argument]</code></p> <p>The <code>log file</code> option is used to specify the file name and/or directory to generate log files at.</p> <p>If there are spaces in the argument, it must be surrounded by quotes ( <code>\"</code> ).</p> <p>A file extension is not required and will be overridden if specified.</p> <p>NOTE: Log file will only be created if logging to file is enabled.</p> <p>Example (File name only, default directory):</p> <pre><code>Command line:      Petrichor.exe comandName --logFile \"logFile.txt\"\nPetrichor Script:  log-file : \"logFile.txt\"\n</code></pre> <p>Petrichor will generate the file <code>[install path]\\_log\\logFile.txt</code>.</p> <p>Example (Directory only, default file name):</p> <pre><code>Command line:      Petrichor.exe commandName --logFile \"[path]/\"\nPetrichor Script:  log-file : [path]/\"\n</code></pre> <p>Petrichor will generate the file <code>[path]\\[default log file name].log</code>.</p> <p>Example: (Full file path):</p> <pre><code>Command line:      Petrichor.exe commandName --logFile \"[path]\\logFile.txt\"\nPetrichor Script:  log-file : \"[path]/logFile.txt\"\n</code></pre> <p>Petrichor will generate the file <code>[path]\\logFile.txt</code>.</p>"},{"location":"user-guide/getting-started/command-usage.html#running-petrichor-via-terminal","title":"Running Petrichor via terminal","text":"<p>Call the executable ( <code>.exe</code> file ) via a terminal (command prompt) to run it.</p> <p>If you run Petrichor with no arguments, it will prompt you to use the <code>--help</code> option to see available commands.</p> <p>Example:</p> <pre><code>[install path]&gt; Petrichor.exe --help\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#running-petrichor-via-batch-file","title":"Running Petrichor via Batch file","text":"<p>If preferred, you can create a Batch file ( <code>.bat</code> file ) to run Petrichor for you.</p> <ol> <li>Make a new text file, name it whatever you want, and change its extension to <code>.bat</code>.<ul> <li>You can also open it in a text editor such as Notepad and use <code>save as \u2192 Batch file</code> to do the same thing.</li> </ul> </li> <li>Open the file in a text editor program, such as Notepad.</li> <li>Type <code>start [install path]/Petrichor.exe]</code>, followed by command usage as shown above.<ul> <li>NOTE: Relative paths are relative to the batch script by default. If they are used in Petrichor commands, they must be relative to Petrichor.exe instead, unless you add Petrichor to your PATH environment variable.</li> </ul> </li> <li>Save the batch file.</li> </ol> <p>Once you've done these steps, you can run the <code>.bat</code> file by double clicking it.</p> <p>Assuming the <code>.bat</code> file was made correctly, it will run Petrichor with all the arguments you set.</p> <p>Example (Command in command line arguments):</p> <p>FOLDER CONTENTS:</p> <pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n</code></pre> <p>IN FILE <code>example batch file.bat</code>:</p> <pre><code>start Petrichor\\Petrichor.exe commandName --inputFile [path]\\inputFile.txt\n</code></pre> <p>Example (Command in input file):</p> <p>FOLDER CONTENTS:</p> <pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n</code></pre> <p>IN FILE <code>example batch file.bat</code>:</p> <pre><code>start Petrichor\\Petrichor.exe [path]\\inputFile.txt\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#relative-file-paths","title":"Relative file paths","text":"<p>If you dont like having to get the full path for files, you can use relative paths instead.</p> <p><code>./</code> gets the folder the .exe file is in, and <code>../</code> gets the parent folder of that folder.</p> <p>Example:</p> <p>FOLDER CONTENTS:</p> <pre><code>- folder/\n    - subfolder/\n        - you are here.txt\n        - example a.txt\n    - example b.txt\n</code></pre> <p>PATH:</p> <pre><code>\"./example a.txt\" -&gt; \"folder\\subfolder\\example a.txt\"\n\"../example b.txt\" -&gt; \"folder\\example b.txt\"\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#a-note-about-slashes-in-file-paths","title":"A note about slashes in file paths","text":"<p>On Windows, backslashes ( <code>\\</code> ) and forward slashes ( <code>/</code> ) both work the same way. Use whichever you prefer to.</p> <p>NOTE: They are not equivalent to each other in Petrichor Script.</p>"},{"location":"user-guide/getting-started/command-usage.html#adding-petrichor-to-windows-path-environment-variable","title":"Adding Petrichor to Windows PATH environment variable","text":"<p>In order to run Petrichor without needing to navigate to its install folder or put its full install path into the terminal, you can add its install path to the Windows PATH environment variable.</p> <ol> <li>Navigate to your Petrichor install folder.</li> <li>Copy the folder path.</li> <li>Open the Start Menu.</li> <li>Search for \"environment variables\".</li> <li>Open <code>Edit the system environment variables</code>.</li> <li>Click the <code>Environment Variables</code> button.</li> <li>Select the <code>Path</code> variable (Within the <code>User</code> variables to set locally, or within the <code>System</code> variables to set globally).</li> <li>Click the <code>Edit</code> button.</li> <li>Click the <code>New</code> button.</li> <li>Paste the folder path you copied in step 2.</li> <li>Click the <code>OK</code> button.</li> </ol> <p>Once you do the above steps, you will be able to run Petrichor in a terminal directly without specifying its install path.</p> <p>Example:</p> <pre><code>Without Petrichor in PATH variable:  C:\\path\\to\\install\\folder\\Petrichor.exe commandName\nWith Petrichor in PATH variable:     Petrichor.exe commandName\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html","title":"Petrichor Script - Getting started","text":"Petrichor Script Getting started"},{"location":"user-guide/getting-started/petrichor-script.html#syntax","title":"Syntax","text":"<p>Petrichor Script is made up of data tokens, which may be nested.</p> <p>Petrichor Script files use the extension <code>.petrichor</code> or <code>.ptcr</code>.</p>"},{"location":"user-guide/getting-started/petrichor-script.html#data-tokens","title":"Data tokens","text":"<p>All data in Petrichor input files is in the form of data tokens, or just \"tokens\".</p> <p>Some tokens are required and some are optional.</p> <p>Some tokens can have a body containing subtokens.</p>"},{"location":"user-guide/getting-started/petrichor-script.html#data-token-structure","title":"Data token structure","text":"<p>Every token consists of a name and a value, separated by a color ( <code>:</code> ).</p> <p>Whitespace between and around these parts is ignored.</p> <p>Whitespace within these parts matters, however.</p> <p>Token names are always in <code>lower-kebab-case</code>.</p> <p>Example (The first two tokens are identical to Petrichor, the third is different.):</p> <pre><code> token-name : Token value. \ntoken-name:Token value.\ntoken-name:Token   value.\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#token-bodies","title":"Token bodies","text":"<p>Some tokens can have a body containing subtokens.</p> <p>These consist of a token (which may or may not require a value), then the body, which is surrounded by curly brackets ( <code>{</code> <code>}</code> ).</p> <p>Tokens within a token body can also have bodies.</p> <p>The contents of the token's body can be indented for readability if desired, but it is not required.</p> <p>Example:</p> <pre><code>parent-token-name:\n{\n    child-token-1-name: Value.\n    {\n        child-token-2-name: Value.\n    }\n}\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#blank-lines-and-comments","title":"Blank lines and comments","text":"<p>Blank lines are ignored.</p> <p>The sequence <code>//</code> starts a comment which continues to the end of the line and will be ignored.</p> <p>Comments can be escaped to make Petrichor treat them as regular text.</p> <p>Example:</p> <pre><code>// This is a comment. This line will be ignored. The following line is blank, and will also be ignored.\n\ntoken: value // This is an inline comment. Everything after \"//\" will be ignored.\ntoken: value \\// This is an escaped comment and is part of the value. // But this is a non-escaped comment and will be ignored.\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#escape-characters","title":"Escape characters","text":"<p>Backslash <code>\\</code> is treated as an \"escape character\" in some cases. It is used to disable the normal function of special characters. An escape character can be applied to another escape character in order to make the scond one print literally.</p> <p>Example:</p> <pre><code>do-something: @to-this // This example token treats @ as a special character and performs operations on it.\ndo-something: \\@but-not-to-this // In this case, the @ will be treated as literal text and no operations will be performed on it.\ndo-something: \\\\@to-this-too // Here, the escape character is escaped, so the @ is not escaped and will be treated as a special character.\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#supported-tokens","title":"Supported tokens","text":"<p>These tokens are universal to all input files.</p> <p>Individual modules use non-universal tokens. Consult a module's documentation to see the tokens it supports.</p>"},{"location":"user-guide/getting-started/petrichor-script.html#metadata-token","title":"Metadata token","text":"<p>(REQUIRED)</p> <p>The <code>metadata</code> token's body contains information necessary for Petrichor to run.</p> <p>It must be the first token in the file regardless of what module is used.</p> <p>Its value will be ignored.</p>"},{"location":"user-guide/getting-started/petrichor-script.html#minimum-version-token","title":"Minimum version token","text":"<p>(REQUIRED)</p> <p>The <code>minimum-version</code> token specifies the minimum Petrichor version required in order to parse the file.</p> <p>Version numbers are in the format <code>major.minor.patch.preview</code>.</p> <p>Major and minor version must be specified.</p> <p>If patch or patch and preview versions are blank, they are assumed to be any version.</p> <p>Example:</p> <pre><code>minimum-version: 1.2.3.pre-4 // Major version 1, minor version 2, patch version 3, preview version pre-4.\nminimum-version: 1.2.3 // Major version 1, minor version 2, patch version 3, any preview version.\nminimum-version: 1.2 // Major version 1, minor version 2, any patch or preview version.\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#command-token","title":"Command token","text":"<p>(OPTIONAL)</p> <p>The <code>command</code> token allows you to specify the command to run in your input file, and Petrichor will handle it automatically when run with the input file.</p> <p>Set the token's value to the name of the command to be run.</p> <p>To use command options, add a body to the token and put subtokens into it, converting the command options' names to <code>kebab-case</code> and setting the tokens' values to the command option values.</p> <p>Example:</p> <pre><code>metadata:\n{\n    minimum-version: [version number]\n    command: commandName\n    {\n        command-option-1: value1\n        command-option-2: value2\n    }\n}\n</code></pre> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe input.txt\n</code></pre> <p>This is equivalent to the following:</p> <pre><code>metadata:\n{\n    minimum-version: [version number]\n}\n</code></pre> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --inputFile input.txt --commandOption1 value1 --commandOption2 value2\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#module-options-region","title":"Module options region","text":"<p>(OPTIONAL)</p> <p>The optional <code>module-options</code> token allows you to configure module-specific options, if supported by a module.</p> <p>Each module that supports this region will have its own version of it.</p> <p>See the relevant module's documentation for more information.</p>"},{"location":"user-guide/getting-started/petrichor-script.html#module-specific-tokens","title":"Module-specific tokens","text":"<p>Modules have unique tokens that are specific to their functions.</p> <p>See the relevant module's documentation for information about its tokens.</p>"},{"location":"user-guide/modules/index.html","title":"Modules","text":"Modules"},{"location":"user-guide/modules/index.html#text-shortcut-script-generation","title":"Text Shortcut Script Generation","text":"<p>This module allows you to generate a text shortcut script (aka \"find and replace\" script) with a Petrichor Script input file.</p> <p>Scripts generated by this module can be used to automatically insert long strings of text with short key sequences.</p> <p>The main benefit is to reduce typing without needing to rely on copy-and-pasting.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html","title":"Text Shortcut Script Generation module","text":"Text Shortcut Script Generation module"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#purpose","title":"Purpose","text":"<p>This module allows you to generate a text shortcut script (aka \"find and replace\" script) with a Petrichor Script input file.</p> <p>Scripts generated by this module can be used to automatically insert long strings of text with short key sequences.</p> <p>The main benefit is to reduce typing without needing to rely on copy-and-pasting.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#petrichor-script","title":"Petrichor Script","text":"<p>See documentation for Petrichor Script input syntax.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#command-usage","title":"Command usage","text":"<p>See documentation for command syntax and usage.</p> <p>--</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#running-output-scripts","title":"Running output scripts","text":"<p>See documentation for running text shortcut scripts.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html","title":"README","text":""},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51-text-shortcut-script-generation-module","title":"5.1 - Text Shortcut Script Generation module","text":""},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#511-text-shortcut-script-generation-module-tokens","title":"5.1.1 - Text Shortcut Script Generation module tokens","text":"<p>This section details all the data tokens that are module-specific for the Text Shortcut Script Generation module.</p> <p>This information likely won't make sense unless you know how to use it first.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#5111-module-options-region-optional","title":"5.1.1.1 - Module options region (OPTIONAL)","text":"<p>This variant of the module options region includes options supported by the Text Shortcut Script Generation module.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51111-custom-icon-tokens-optional","title":"5.1.1.1.1 - Custom icon tokens (OPTIONAL)","text":"<p>If desired, you can specify filepaths to custom icons for the shortcut script to use.</p> <p>Available tokens are:</p> <ul> <li><code>default-icon</code> : Min 0, max 1. This token allows setting a custom default icon for the script. Set value to the path to the icon file you want to use.</li> <li><code>suspend-icon</code> : Min 0, max 1. This token allows setting a custom icon for the script to use when suspended. Set value to the path to the icon file you want to use.</li> </ul> <p>IMPORTANT NOTE: If you move an icon file and do not update its path in your input file and regenerate the script, the icon will not be found by AutoHotkey and will not be applied.</p> <p>Example:</p> <pre><code>module-options:\n{\n    default-icon: {path to default icon file}.ico\n    suspend-icon: {path to suspend icon file}.ico\n}\n</code></pre> <p>For simplicity, if an icon file will be in the same folder as the shortcut script, you can use a relative path.</p> <p>Example:</p> <pre><code>module-options:\n{\n    default-icon: ./{default icon file name}.ico\n    suspend-icon: ./{suspend icon file name}.ico\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51112-reload-suspend-shortcut-tokens-optional","title":"5.1.1.1.2 - Reload / suspend shortcut tokens (OPTIONAL)","text":"<p>If desired, you can include keyboard shortcuts to reload and/or suspend the script.</p> <p>To include a shortcut to reload the script, add a token to the module options region with the name <code>reload-shortcut</code> and set its value to a valid AutoHotkey v2.0 shortcut string; If you do not know how to write one, consult AutoHotkey documentation. To make this easier, some find and replace strings are supported by Petrichor.</p> <p>To include a shortcut to suspend the script, do the same with a token named <code>suspend-shortcut</code>.</p> <p>Example:</p> <pre><code>module-options:\n{\n    reload-shortcut: #r // Windows key + R\n    suspend-shortcut: #s // Windows key + S\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#511121-shortcut-find-and-replace-strings","title":"5.1.1.1.2.1 - Shortcut find-and-replace strings","text":"<p>The following strings are supported:</p> <ul> <li><code>[windows]</code> / <code>[win]</code> \u2192 Windows key</li> <li><code>[alt]</code> \u2192 either Alt key</li> <li><code>[left-alt]</code> / <code>[lalt]</code> \u2192 left Alt key</li> <li><code>[right-alt]</code> / <code>[ralt]</code> \u2192 right Alt key</li> <li><code>[control]</code> / <code>[ctrl]</code> \u2192 either Control key</li> <li><code>[left-control]</code> / <code>[lctrl]</code> \u2192 left Control key</li> <li><code>[right-control]</code> / <code>[rctrl]</code> \u2192 right Control key</li> <li><code>[shift]</code> \u2192 either Shift key</li> <li><code>[left-shift]</code> / <code>[lshift]</code> \u2192 left Shift key</li> <li><code>[right-shift]</code> / <code>[rshift]</code> \u2192 right Shift key</li> <li><code>[and]</code> \u2192 <code>&amp;</code></li> <li><code>[alt-graph]</code> / <code>[altgr]</code> \u2192 AltGr (AltGraph) key</li> <li><code>[wildcard]</code> / <code>[wild]</code> \u2192 <code>*</code></li> <li><code>[passthrough]</code> / <code>[tilde]</code> \u2192 <code>~</code></li> <li><code>[send]</code> \u2192 <code>$</code></li> <li><code>[tab]</code> \u2192 Tab key</li> <li><code>[caps-lock]</code> / <code>[caps]</code> \u2192 CapsLock key</li> <li><code>[enter]</code> \u2192 Enter key</li> <li><code>[backspace]</code> / <code>[bksp]</code> \u2192 Backspace key</li> <li><code>[insert]</code> / <code>[ins]</code> \u2192 Insert key</li> <li><code>[delete]</code> / <code>[del]</code> \u2192 Delete key</li> <li><code>[home]</code> \u2192 Home key</li> <li><code>[end]</code> \u2192 End key</li> <li><code>[page-up]</code> / <code>[pgup]</code> \u2192 PageUp key</li> <li><code>[page-down]</code> / <code>[pgdn]</code> \u2192 PageDown key</li> <li><code>\\[</code> \u2192 <code>[</code></li> <li><code>\\]</code> \u2192 <code>]</code></li> </ul> <p>Example:</p> <pre><code>module-options:\n{\n    reload-shortcut: [win]r // Windows key + R\n    suspend-shortcut: \\[win\\]s // [win]s\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#5112-shortcut-list-region-required","title":"5.1.1.2 - Shortcut list region (REQUIRED)","text":"<p>This region defines the text shortcuts to be generated. Standard or templated shortcuts can be defined. Templated shortcuts define the structure of shortcuts to create from entries.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51121-shortcut-tokens-optional","title":"5.1.1.2.1 - Shortcut tokens (OPTIONAL)","text":"<p>This token defines a standard plaintext shortcut. Standard shortcuts are defined by tokens with the name <code>shortcut</code>. Shortcuts can use special AutoHotkey behavior if written correctly. Consult AutoHotkey documentation to learn how to do this.</p> <p>All shortcuts must start with a \"find\" text string, then <code>::</code>, then a \"replace\" text string. NOTE: You cannot use <code>::</code> in a \"find\" string due to the way AutoHotkey hotstrings work. Petrichor will allow it, but the shortcuts it generates will not work. These components can have whitespace between them, but note that this whitespace will be trimmed off unless you force it to be kept in by inserting a backtick <code>`</code> at the start or end of the \"find\" and/or \"replace\" strings.</p> <p>Example:</p> <pre><code>shortcut-list:\n{\n    shortcut: [find string] :: ` [replace string] `\n}\n\n// SHORTCUTS GENERATED FROM INPUT:\n\n// Standard shorcuts will only be written to the output file once.\n::[find string]::` [replace string] ` // This is a standard shortcut. The [find string] and [replace string] will be inserted into the output file unaltered.\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51122-shortcut-template-region-optional","title":"5.1.1.2.2 - Shortcut template region (OPTIONAL)","text":"<p>This region defines a template to create shortcuts from. Templated shortcuts are defined by tokens with the name <code>shortcut-template</code>.</p> <p>All shortcuts must start with a \"find\" text string, then <code>::</code>, then a \"replace\" text string. NOTE: You cannot use <code>::</code> in a \"find\" string due to the way AutoHotkey hotstrings work. Petrichor will allow it, but the shortcuts it generates will not work. These components can have whitespace between them, but note that this whitespace will be trimmed off unless you force it to be kept in by inserting a backtick <code>`</code> at the start or end of the \"find\" and/or \"replace\" strings.</p> <p>Use marker strings to define how templates should be applied to entries. Templates support custom find and replace dictionaries. </p> <p>If this is not followed, the generated script wont work correctly, even though Petrichor will run without errors.</p> <p>Example:</p> <pre><code>shortcut-list:\n{\n    shortcut-template: [find string] :: ` [replace string] ` // No optional features are used, so no region body is needed.\n    shortcut-template: [find string] :: [replace string] // Optional features are used, so a region body is needed.\n    {\n        // optional feature tokens go here.\n    }\n}\n\n// SHORTCUTS GENERATED FROM INPUT:\n\n// One copy of these shortcuts will be generated for every entry. Any template markers in the [find string] or [replace string] will be replaced with entry data.\n::[find string]::` [replace string] ` // This is a standard template. No extra processing will be done to it.\n::[find string]::[replace string] // Optional features will be applied to this template.\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#511221-template-marker-strings","title":"5.1.1.2.2.1 - Template marker strings","text":"<p>Certain symbols will be replaced by fields from entries in the input file by default. This is how templates are able to be used to generate shortcuts.</p> <p>If no marker strings are present, a template will be inserted into the output file with no changes for every <code>name</code> token present in the input file. This technically will not break the script, but it is not recommended.</p> <p>Available marker strings are:</p> <ul> <li><code>[color]</code></li> <li><code>[decoration]</code></li> <li><code>[id]</code></li> <li><code>[name]</code></li> <li><code>[last-name]</code></li> <li><code>[last-tag]</code></li> <li><code>[pronoun]</code></li> <li><code>[tag]</code></li> </ul> <p>NOTE: Only these supported marker strings can be used. Unknown marker strings will be rejected.</p> <p>NOTE: By default, you cannot use the <code>[</code> or <code>]</code> symbols in a template string. Use escape characters to circumvent this.</p> <p>Example:</p> <pre><code>entry-list:\n{\n    entry:\n    {\n        id: 1234\n        name: Sam @sm\n        name: Sammy @smy\n        last-name: Smith @s\n        pronoun: they/them\n        color: #89abcd\n        decoration: -- a person\n    }\n}\n\nshortcut-list:\n{\n    shortcut-template:  [tag][last-tag] :: [id] - [name] [last-name] ([pronoun]) | {[decoration]} | [color]\n}\n\n// shortcutS GENERATED FROM INPUT:\n\n::sms::1234 - Sam Smith (they/them) | {-- a person} | #89abcd\n::smys::1234 - Sammy Smith (they/them) | {-- a person} | #89abcd\n</code></pre> <p>You can use each marker string in a template as many times as you want</p> <p>Example:</p> <pre><code>entry-list:\n{\n    entry:\n    {\n        id: 1234\n        name: Sam @sm\n        name: Sammy @smy\n        last-name: Smith @s\n        pronoun: they/them\n        color: #89abcd\n        decoration: -- a person\n    }\n}\n\nshortcut-list:\n{\n    shortcut-template: [tag][tag] :: [name] | {[name] [decoration]}\n}\n\n// shortcutS GENERATED FROM INPUT:\n\n::smsm::Sam (they/them) | [Sam is a person]\n::smysmy::Sammy (they/them) | [Sammy is a person]\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#511222-find-and-replace-tokens-optional","title":"5.1.1.2.2.2 - Find and replace tokens (OPTIONAL)","text":"<p>These tokens are used to define custom find-and-replace pairs for a template.</p> <p>The find-and-replace pairs are only applied to the template's \"replace\" string. They are applied after a template is populated with entry data, and therefore are able to modify that data.</p> <p>\"Find\" keys are defined by a token with the name <code>find</code>. \"Replace\" values are defined by a token with the name <code>replace</code>.</p> <p>The value of a <code>find</code> or <code>replace</code> token must be an inline region body, starting with a <code>{</code> and ending with a <code>}</code>. Within the token body, put your find/replace items as a comma-separated list. The lists cannot contain blank items, and they must have the same number of items as each other.</p> <p>A <code>replace</code> token must be paired with a <code>find</code> token, and must come after it. A <code>find</code> token can be present without a paired <code>replace</code> token, but this will cause all the \"find\" items to be removed rather than replaced with other text.</p> <p>Example:</p> <pre><code>shortcut-list:\n{\n    shortcut-template: [find string] :: [replace string] custom find 1, custom find 2\n    {\n        find: { custom find 1, custom find 2 } // These are the \"find\" keys.\n        replace: { replace 1, replace 2 } // These are the corresponding \"replace\" values.\n    }\n}\n\n// shortcutS GENERATED FROM INPUT:\n\n::[find string]::[replace string] replace 1, replace 2 // If the \"find\" keys are present in the [replace string] values for an entry, they will be replaced as well.\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#511222-text-case-tokens-optional","title":"5.1.1.2.2.2 - Text Case tokens (OPTIONAL)","text":"<p>These tokens are used to change the text case of a template's \"replace\" string. Case conversion is applied after custom find-and-replace pairs.</p> <p>Text case is defined by a token with the name <code>text-case</code>. Allowed values are: - unchanged (as-written; default) - upper (UPPER CASE) - lower (lower case) - firstCaps (First Capitals Case)</p> <p>Example:</p> <pre><code>shortcut-list:\n{\n    shortcut-template: [find string] :: [replace String]\n    {\n        text-case: unchanged\n    }\n    shortcut-template: [find string] :: [replace String]\n    {\n        text-case: upper\n    }\n    shortcut-template: [find string] :: [replace String]\n    {\n        text-case: lower\n    }\n    shortcut-template: [find string] :: [replace String]\n    {\n        text-case: firstCaps\n    }\n}\n\n// shortcutS GENERATED FROM INPUT:\n\n::[find string]::[replace String]\n::[find string]::[REPLACE STRING]\n::[find string]::[replace string]\n::[find string]::[Replace String]\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#5113-entry-list-region-required","title":"5.1.1.3 - Entry list region (REQUIRED)","text":"<p>This region defines the entries to be converted into shortcuts.</p> <p>Each entry is an <code>entry</code> region which defines a set of values to create shortcut shortcuts from. There is no limit to how many entries the <code>entry-list</code> region can contain.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51131-entry-regions-optional","title":"5.1.1.3.1 - Entry regions (OPTIONAL)","text":"<p>This region defines a set of data to apply shortcut templates to. At least one of this region must be present.</p> <p>Entry regions are made up several token types. There are different restrictions and requirements for each type.</p> <ul> <li><code>color</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.</li> <li><code>decoration</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.</li> <li><code>id</code> : Min 1, max 1. This token defines a value to associated with all <code>name</code> tokens that are present.</li> <li><code>name</code> : Min 1. This token defines a name/tag pair.<ul> <li>This token type's value is structured as <code>[name] @[tag]</code>, where the <code>[name]</code> portion can be any non-blank string that does not contain an <code>@</code> character, and the <code>[tag]</code> portion can be any string that does not contain whitespace.</li> </ul> </li> <li><code>last-name</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.<ul> <li>This token type's value structure is identical to that of <code>name</code> tags.</li> </ul> </li> <li><code>pronoun</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.</li> </ul> <p>NOTE: All token values should be unique, even though Petrichor wont take issue with it. If a value is repeated, the AutoHotkey script generated from the input data will misbehave in unpredictable ways.</p> <p>Example:</p> <pre><code>entry: // all optional tokens present\n{\n    id: 1234\n    name: Sam @sm\n    name: Sammy @smy\n    last-name: Smith @s\n    pronoun: they/them\n    color: #89abcd\n    decoration: -- a person\n}\n\nentry: // only required tokens present\n{\n    id: 4321\n    name: ALEX @AX\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#512-generatetextshortcutscript-command","title":"5.1.2 - <code>generateTextShortcutScript</code> command","text":"<p>To generate a text hotstring shortcut script, call Petrichor with the command argument <code>generateTextShortcutScript</code>.</p> <p>This command supports the following options:</p> <ul> <li>--inputFile</li> <li>--outputFile</li> <li>--logMode</li> <li>--logFile</li> </ul> <p>Example:</p> <pre><code>{install path}\\Petrichor\\\n&gt;Petrichor.exe generateTextShortcutScript --inputFile {file} --outputFile {file} --logMode {mode} --logFile {file}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#513-using-the-script-generated-by-petrichor","title":"5.1.3 - Using the script generated by Petrichor","text":"<p>Petrichor text shortcut scripts are AutoHotkey scripts. Petrichor itself cannot run them.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#5131-install-autohotkey","title":"5.1.3.1 - Install AutoHotkey","text":"<p>Before you can do anything with your script, you need to install AutoHotkey. Download and install AutoHotkey v2, then continue.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#5132-running-the-script","title":"5.1.3.2 - Running the script","text":"<p>Either double-click the .ahk file or right click on it and click \"run script\" in the dropdown menu.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#5133-methods-to-launch-the-script-automatically","title":"5.1.3.3 - Methods to launch the script automatically","text":"<p>If you get sick of launching a script manually, there are a few options.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51331-windows-startup-shortcut-recommended","title":"5.1.3.3.1 - Windows Startup shortcut (RECOMMENDED)","text":"<p>This is the simplest method. It's not totally reliable, but it works the majority of the time. Occasionally a script will launch successfully, but not show up in the taskbar tray. If that bothers you, just relaunch the script manually.</p> <p>Here's how to do it:</p> <ol> <li>Right-click the script in File Explorer.</li> <li>Click <code>Create shortcut</code> in the dropdown menu.</li> <li>Press <code>Win+R</code> to open the Windows Run dialog.</li> <li>Type <code>shell:startup</code> into the dialog, then click OK.</li> <li>The Startup folder will open. Copy the shortcut you created in step 2 into it.</li> </ol>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51332-task-scheduler","title":"5.1.3.3.2 - Task Scheduler","text":"<p>Wi've found this method to be less reliable than the Windows Startup method, but it does work more often than not. It's also kind of a pain to set up. Wi recommend using the Windows Startup method over this one, unless that method doesnt work for you.</p> <p>You can follow the directions here to set it up.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/__README__.html#51333-registry-not-recommended","title":"5.1.3.3.3 - Registry (NOT RECOMMENDED)","text":"<p>DO NOT DO THIS UNLESS YOU KNOW WHAT YOU'RE DOING. Editing the registry can brick your computer if you're not careful.</p> <p>Wi strongly recommend using one of the other methods above, unless all of them dont work for you.</p> <p>Also, wi havent personally tested this method, so wi dont know how reliable it is, but it probably should work about the same as the other two?</p> <ol> <li>Open the Registry Editor. There are two days to do this:<ul> <li>Press <code>Win+R</code> to open the Run dialog, type in <code>regedit</code>, then click OK.</li> <li>Open the Start menu and search for either <code>regedit</code> or <code>Registry Editor</code>.</li> </ul> </li> <li>Navigate to <code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code>.</li> <li>Add a new String key. Name it however you prefer.</li> <li>Edit the value of the new string key and put in <code>\"@:\\path\\to\\autohotkey\\version\\file.exe\" \"@:\\path\\to\\script\\file.ahk\"</code>, using the filepaths of your AutoHotkey installation and your script file.</li> </ol>"},{"location":"user-guide/modules/text-shortcut-script-generation/command-usage.html","title":"Command usage - Text Shortcut Script Generation module","text":"Command usage Text Shortcut Script Generation module"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html","title":"Petrichor Script - Text Shortcut Script Generation module","text":"Petrichor Script Text Shortcut Script Generation module"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html","title":"Running output scripts - Text Shortcut Script Generation module","text":"Running output scripts Text Shortcut Script Generation module"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#requirements","title":"Requirements","text":"<p>The requirements to run a text shortcut script generated by Petrichor are listed below.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#autohotkey","title":"AutoHotkey","text":"<p>The scripts that this module generates are AutoHotkey v2 scripts. In order to run them, you will need to install AutoHotkey.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#running-text-shortcut-scripts","title":"Running text shortcut scripts","text":"<p>With AutoHotkey installed, simply double-click the script ( <code>.ahk</code> file ), or right-click it and click <code>run</code> in the context menu.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#automatically-run-scripts-after-generating-them","title":"Automatically run scripts after generating them","text":"<p>You can make a batch script wait for Petrichor to finish running and launch the output script automatically.</p> <ol> <li>Create a batch script using the steps linked above.</li> <li>After the <code>start</code> keyword, add <code>/wait</code>. This will cause the batch script to wait until Petrichor is closed before continuing.</li> <li>Add a new line to the batch script, and enter <code>start [path/script.ahk]</code>.</li> <li>Save the batch file.</li> </ol> <p>Once you've done these steps, you can run the <code>.bat</code> file by double clicking it. Assuming the <code>.bat</code> file was made correctly, it will run Petrichor with all the arguments you set, wait until it closes, then launch the output script.</p> <p>NOTE: If Petrichor fails to generate a new script, any existing version of the output script will be launched instead.</p> <p>Example (Command in command line arguments):</p> <p>FOLDER CONTENTS:</p> <pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n</code></pre> <p>IN FILE <code>example batch file.bat</code>:</p> <pre><code>start /wait Petrichor\\Petrichor.exe commandName --inputFile ..\\inputFile.txt\nstart outputFile.ahk\n</code></pre> <p>Example (Command in input file):</p> <p>FOLDER CONTENTS:</p> <pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n    - outputFile.ahk (will be generated after running)\n</code></pre> <p>IN FILE <code>example batch file.bat</code>:</p> <pre><code>start /wait Petrichor\\Petrichor.exe ..\\inputFile.txt\nstart outputFile.ahk\n</code></pre>"}]}