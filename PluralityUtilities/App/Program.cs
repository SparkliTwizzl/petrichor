using PluralityUtilities.AutoGeneratedFiles;
using PluralityUtilities.AutoHotkeyScripts.Utilities;
using PluralityUtilities.Logging;


namespace PluralityUtilities.App
{
	static class Program
	{
		private static string _inputFilePath = "";
		private static bool _isLoggingEnabled = false;
		private static string _outputFilePath = "";
		private static DateTime _startTime;
		private const string _version = "1.0";


		static void Main(string[] args)
		{
			_startTime = DateTime.Now;
			Console.WriteLine($"PluralityUtilities v{_version}");
			ParseArgs(args);
			InitLogging();
			Log.WriteLineTimestamped($"PluralityUtilities v{_version}; execution started at {_startTime}");
			ParseInputAndGenerateAutoHotkeyScript();
			var executionFinished = $"execution finished in {(DateTime.Now - _startTime).TotalSeconds} seconds";
			Console.WriteLine(executionFinished);
			Log.WriteLineTimestamped(executionFinished);
		}


		private static void InitLogging()
		{
			if (_isLoggingEnabled)
			{
				Console.WriteLine("logging is enabled");
				Log.Enable();
				Log.SetLogFolder(ProjectDirectories.LogDir);
			}
			else
			{
				Console.WriteLine("logging is disabled");
			}
		}

		private static void ParseArgs(string[] args)
		{
			if (args.Length < 1)
			{
				Console.WriteLine("pass path to input file as arg0; pass name of output file as arg1; pass \"-l\" as arg2 to enable logging");
				return;
			}
			_inputFilePath = args[0];
			_outputFilePath = args[1];
			if (args.Length > 2)
			{
				_isLoggingEnabled = args[2] == "-l";
			}
		}

		private static void ParseInputAndGenerateAutoHotkeyScript()
		{
			try
			{
				AkfFileParser parser = new AkfFileParser();
				parser.ParseFile(_inputFilePath);
				ScriptGenerator scriptGenerator = new ScriptGenerator();
				scriptGenerator.Generate(parser.People, _outputFilePath);
				var successMessage = "generating script succeeded";
				Console.WriteLine(successMessage);
				Log.WriteLineTimestamped(successMessage);
			}
			catch (Exception ex)
			{
				var errorMessage = $"generating script failed with error: {ex.Message}";
				Console.WriteLine(errorMessage);
				Log.WriteLineTimestamped(errorMessage);
			}
		}
	}
}
