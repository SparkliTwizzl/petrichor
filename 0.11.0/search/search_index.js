var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Petrichor /\u02c8p\u025btr\u026a\u02cck\u0254\u02d0r/ (noun) The scent of damp earth, particularly after rain. Part of the Trioxichor project."},{"location":"index.html#about","title":"About","text":"<p>Petrichor is a command-line app with modules for various utilities.</p> <p>Source code and releases are on GitHub.</p> <p>Petrichor is licensed under the Anti-Exploitation License Noncommercial Attribution v1.1 (AEL-NC-AT 1.1). By using this project or its source material, you agree to abide by the terms of this license.</p>"},{"location":"index.html#i-think-i-found-a-bug-i-have-an-idea-for-the-project","title":"I think i found a bug / I have an idea for the project","text":"<p>Report bugs and make suggestions on the GitHub issues board.</p> <p>If there's a dead link in this documentation, please report it so it can be fixed.</p> <p>In order for developers to find bugs easier, please describe what you were doing in as much detail as you're able to (Even better, write steps to reproduce the issue), say what you expected to happen, say what actually happened, and if you can, include the input, output, and log files.</p>"},{"location":"about/changelog.html","title":"Changelog - About","text":"Changelog"},{"location":"about/changelog.html#0110","title":"0.11.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Change license to AEL-NC-AT 1.1.</li> <li>Overhaul user guide.</li> </ul> <p>Text Shortcut Script Generation module</p> <ul> <li>Change <code>template-list</code> token to <code>shortcut-list</code>.</li> <li>Change <code>template</code> token to <code>shortcut-template</code>.</li> <li>Change shortcut structure to <code>&lt;hotstring&gt; &gt;&gt; &lt;replacement string&gt;</code>.</li> <li>Change control shortcut find-and-replace table.<ul> <li>Change main and alias tags for <code>&amp;</code>, <code>[</code>, and <code>]</code>.</li> <li>Change alias tag for <code>*</code>.</li> <li>Add alias tag for <code>$</code>.</li> </ul> </li> <li>Change console logging colors via Pastel.</li> <li>Add plaintext shortcuts.</li> </ul>"},{"location":"about/changelog.html#0102","title":"0.10.2","text":"<p>Bugfixes</p> <ul> <li>Fix 201 - custom template find and replace is applied to template find strings.</li> </ul>"},{"location":"about/changelog.html#0101","title":"0.10.1","text":"<p>Text Shortcut Script Generation module</p> <ul> <li>Add missing log info messages.</li> </ul> <p>Bugfixes</p> <ul> <li>Fix 187 - escaping comments does not work.</li> <li>Fix 188 - command file option values in quotes are parsed incorrectly.</li> </ul>"},{"location":"about/changelog.html#0100","title":"0.10.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Change license to AEL-NC-AT 1.0.</li> <li>Change logo.</li> <li>Change line comment start sequence from <code>#:</code> to <code>//</code>.</li> <li>Add <code>command</code> token to allow putting commands and command options in input files.</li> <li>Add input file line numbers to log messages.</li> <li>Set window title.</li> </ul> <p>Text Shortcut Script Generation module</p> <ul> <li>Add default behavior for <code>output file</code> and <code>log file</code> command options.</li> <li>Add support for changing text case of templates.</li> <li>Add support for custom find-and-replace dictionaries in templates.</li> </ul> <p>Bugfixes</p> <ul> <li>Fix 165 - escaped escape characters are incorrectly removed.</li> </ul>"},{"location":"about/changelog.html#091","title":"0.9.1","text":"<p>Bugfixes</p> <ul> <li>Fix 157 - templates region is parsed multiple times and fails.</li> </ul>"},{"location":"about/changelog.html#090","title":"0.9.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Change logo.</li> <li>Change <code>metadata</code> token to <code>module-options</code>.</li> <li>Add new <code>metadata</code> token for other purposes.</li> <li>Add support for line comments in input files.</li> <li>Update and improve documentation.</li> <li>Improve logging.</li> </ul> <p>Text Shortcut Script Generation module</p> <ul> <li>Change command from <code>generateAHKShortcutScript</code> to <code>generateTextShortcutScript</code>.</li> <li>Add find-and-replace table to simplify syntax for <code>reload-shortcut</code> and <code>suspend-shortcut</code> token values.</li> <li>Simplify <code>template</code> token structure.</li> <li>Add <code>id</code> token to <code>entry</code> token body.</li> <li>Add <code>last-name</code> token to <code>entry</code> token body.</li> <li>Add <code>color</code> token to <code>entry</code> token body.</li> <li>Add methods to automatically launch shortcut scripts to documentation.</li> </ul>"},{"location":"about/changelog.html#080","title":"0.8.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Rename project from <code>PluralityUtilities</code> to <code>Petrichor</code>.</li> <li>Add icon.</li> <li>Add command line option to specify log file.</li> <li>Improve logging.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Change output script language from <code>AutoHotkey v1</code> to <code>AutoHotkey v2</code>.</li> <li>Combine input and template files into a single input file.</li> <li>Add \"generated by\" message to output file headers.</li> <li>Add support for custom <code>default</code> and <code>suspend</code> icons.</li> <li>Add support for <code>reload</code> and <code>suspend</code> keyboard shortcuts.</li> </ul>"},{"location":"about/changelog.html#070","title":"0.7.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Ignore blank lines in input files.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Add byte-order mark to output file headers.</li> </ul>"},{"location":"about/changelog.html#061","title":"0.6.1","text":""},{"location":"about/changelog.html#060","title":"0.6.0","text":"<p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Add note about using escape characters on backslashes and update example in documentation.</li> <li>Add SingleInstance AutoHotkey parameter to output scripts.</li> </ul> <p>Bugfixes</p> <ul> <li>Fix 31 - results portion of example in section 4.2.5 of documentation should not have backslashes.</li> </ul>"},{"location":"about/changelog.html#050","title":"0.5.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Add unit tests.</li> <li>Add documentation.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Replace hard-coded templates with user-provided template file.</li> <li>Remove <code>.akf</code> file extension restriction for input files.</li> <li>Add support for escape characters in templates.</li> </ul>"},{"location":"about/changelog.html#040","title":"0.4.0","text":""},{"location":"about/changelog.html#030","title":"0.3.0","text":""},{"location":"about/changelog.html#020","title":"0.2.0","text":""},{"location":"about/changelog.html#010","title":"0.1.0","text":"<p>General</p> <ul> <li>Initial release.</li> </ul>"},{"location":"about/license.html","title":"License - About","text":"Petrichor Copyright (c) 2024 SparkliTwizzl Anti-Exploitation License Noncommmercial Attribution v1.1 (AEL-NC-AT 1.1) <p>This is an anti-capitalist, anti-fascist, anti-bigotry, pro-human-rights project, released for free use by individuals and organizations who are tired of ill-intentioned entities exploiting their work for free and/or using their work for malicious purposes, and would rather not have such entities use or interact with their creations.</p> <p>Permission is hereby granted, free of charge, by the creators (the \"Authors\") of this project and associated documentation files (the \"Project\"), to any person or organization (the \"User\") obtaining a copy of the Project, to use, modify, and distribute, for personal or educational purposes, subject to the following conditions:</p> <ol> <li> <p>All copies or modified versions of the Project shall include:</p> <ul> <li>A. The above copyright notice.</li> <li>B. This permission notice.</li> <li>C. Attribution of the Project to the Authors.</li> <li>D. A disclaimer that the Authors are not affiliated with the User, and the Authors do not endorse the User's use or modification of the Project.</li> </ul> </li> <li> <p>The User is one of the following:</p> <ul> <li>A. An individual person, laboring for themself.</li> <li>B. A non-profit organization.</li> <li>C. An educational institution.</li> <li>D. An organization that seeks shared profit for all of its members, and allows non-members to set the cost of their labor.</li> </ul> </li> <li> <p>If the User is an organization with owners, then all owners are workers and all workers are owners with equal equity and/or equal vote.</p> </li> <li> <p>If the User is an organization, then the User is not law enforcement or military, or working for or under either.</p> </li> <li> <p>The user does not use the Project for ill-intentioned and/or malicious reasons, as determined by the Authors. Said reasons include but are not limited to:</p> <ul> <li>A. Bigotry, including but not limited to: racism; xenophobia; homophobia; transphobia; ableism; ageism; sexism; antisemitism; zionism; religious intolerance.</li> <li>B. Exploitation of entities not capable of giving informed consent, including but not limited to: pedophilia; zoophilia.</li> <li>C. Support for law enforcement and/or the military, including but not limited to: police; carceral institutions; immigration enforcement.</li> <li>D. Any purpose utilizing and/or relating to blockchain technology, including but not limited to: cryptocurrencies; non-fungible tokens (\"NFT\"s).</li> <li>E. Any purpose intended to prevent knowledge and/or use of technologies and/or information which could benefit humankind, including but not limited to: strategic lawsuits against public participation (\"SLAPP suits\"); unjustified legal action for the purposes of forcing compliance and/or nonopposition; indefinite holding of patents without allowing for their use (\"patent-squatting\").</li> </ul> </li> <li> <p>The User attests their agreement to the following:</p> <ul> <li>A. Condemnation of the unlawful invasion and/or occupancy of sovereign states, including but not limited to that of Ukraine by Russia.</li> <li>B. Condemnation of all forms of genocide against any peoples for any reason, including but not limited to that of the Rohingya people in Myanman; the people of Palestine/Gaza; the Darfuris of South Sudan.</li> <li>C. Condemnation of all forms of slavery, servitude, and/or forced labor, including but not limited to: subjugation and exploitation under threat of violence or other harm; unlawful child labor; forced, uncompensated, and/or undercompensated prisoner labor.</li> <li>D. Transgender, nonbinary, and/or otherwise LGBTQIA+/queer people are people, rights for LGBTQIA+/queer people are human rights which benefit all people, and LGBTQIA+/queer people are fully capable of making decisions about their own lives.</li> <li>E. Autistic and/or otherwise neurodiverse people are people, rights for neurodiverse people are human rights which benefit all people, and neurodiverse people are fully capable of making decisions about their own lives.</li> <li>F. Disabled and/or otherwise differently abled people are people, rights for differently abled people are human rights which benefit all people, and differently abled people are fully capable of making decisions about their own lives.</li> </ul> </li> <li> <p>The User does not engage in and/or promote any of the activities listed in Item 5, and is not affiliated with any group and/or organization that engages in and/or promotes any of such activities. The User does not behave in a manner counter to the priciples listed in Item 6, and is not affiliated with any group and/or organization that behaves in a manner counter to such principles.</p> </li> <li> <p>The User does not resell the Project or any part of the Project.</p> </li> </ol> <p>The Project is provided \"as is\", without express or implied warranty of any kind, including but not limtied to the warranties of: merchantability; fitness for a particular purpose; noninfringement. In no event shall the Authors be liable for any claim; damages; or other liability, whether in action of contract; tort; or otherwise, arising from; out of; or in connection with, the Project; or the use of or dealings in the Project.</p>"},{"location":"user-guide/getting-started/index.html","title":"Getting started","text":"Getting started"},{"location":"user-guide/getting-started/index.html#petrichor-script","title":"Petrichor Script","text":"<p>Petrichor uses input files written with Petrichor Script. See documentation for how to use it.</p>"},{"location":"user-guide/getting-started/index.html#command-usage","title":"Command usage","text":"<p>Petrichor is run from the command line. See documentation for how to do so.</p>"},{"location":"user-guide/getting-started/index.html#modules","title":"Modules","text":"<p>Petrichor consists of modules for various utilities.</p> <p>Each module has unique input and command syntax following a common structure.</p> <p>See documentation for more information.</p>"},{"location":"user-guide/getting-started/command-usage.html","title":"Command usage - Getting started","text":"Command usage Getting started"},{"location":"user-guide/getting-started/command-usage.html#commands","title":"Commands","text":"<p>Petrichor modules each have a corresponding command to trigger them.</p> <p>These can be given as command line arguments, or they can be put into your input file and Petrichor will attempt to read ane execute them automatically.</p>"},{"location":"user-guide/getting-started/command-usage.html#default-command","title":"Default command","text":"<p>You can run Petrichor without passing it a command if you put the command in your input file and pass the input file as an argument when you run it.</p> <p>You can also just drag-and-drop the input file onto the executable ( <code>.exe</code> file ).</p> <p>If no arguments are provided, you will be prompted to use the <code>--help</code> option to see usage and available commands.</p> Example <pre><code>Petrichor.exe --help\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#module-commands","title":"Module commands","text":"<p>Modules have unique command syntax and supported options.</p> <p>See the relevant module's documentation for more information.</p>"},{"location":"user-guide/getting-started/command-usage.html#command-options","title":"Command options","text":"<p>Commands can have their behavior modified with options.</p> <p>Some commands have unique options.</p>"},{"location":"user-guide/getting-started/command-usage.html#input-file-option","title":"Input file option","text":"<p>Command line syntax: <code>--inputFile [argument]</code></p> <p>Petrichor Script syntax: <code>input-file : &lt;argument&gt;</code></p> <p>The <code>input file</code> option allows you to specify the input file directory and/or name.</p> <p>Relative file paths can be used.</p> <p>Note</p> <p>If you only provide the directory, <code>input.petrichor</code> will be used as the file name.</p> <p>Note</p> <p>If you only provide the file name, <code>{install path}\\</code> will be used as the directory.</p> Restrictions <p>OPTIONAL</p> <p>If there are spaces in the argument, it must be surrounded by quotes ( <code>\"</code> ).</p> <p>You must include the file extension if you provide a file name.</p> Example Command linePetrichor Script File name only, default directoryDirectory only, default file nameFull file path <p><pre><code>Petrichor.exe commandName --inputFile \"inputFile.txt\"\n</code></pre> Petrichor will look for \"{install path}\\inputFile.txt\".</p> <p><pre><code>Petrichor.exe commandName --inputFile \"[path]\\\"\n</code></pre> Petrichor will look for \"{path}\\input.petrichor\".</p> <p><pre><code>Petrichor.exe commandName --inputFile \"[path]\\inputFile.txt\"\n</code></pre> Petrichor will look for \"{path}\\inputFile.txt\".</p> File name only, default directoryDirectory only, default file nameFull file path <p><pre><code>input-file : \"inputFile.txt\"\n</code></pre> Petrichor will look for \"{install path}\\inputFile.txt\".</p> <p><pre><code>input-file : \"&lt;path&gt;\\\"\n</code></pre> Petrichor will look for \"{path}\\input.petrichor\".</p> <p><pre><code>input-file : \"&lt;path&gt;\\inputFile.txt\"\n</code></pre> Petrichor will look for \"{path}\\inputFile.txt\".</p>"},{"location":"user-guide/getting-started/command-usage.html#output-file-option","title":"Output file option","text":"<p>Command line syntax: <code>--outputFile [argument]</code></p> <p>Petrichor Script syntax: <code>output-file : &lt;argument&gt;</code></p> <p>The <code>output file</code> option allows you to specify the output file directory and/or name for commands which generate files.</p> <p>Relative file paths can be used.</p> <p>Note</p> <p>If you only provide the directory, <code>output.{extension}</code> will be used as the file name.</p> <p>Note</p> <p>If you only provide the file name, <code>{install path}\\_output\\</code> will be used as the directory.</p> Restrictions <p>OPTIONAL</p> <p>If there are spaces in the argument, it must be surrounded by quotes ( <code>\"</code> ).</p> <p>A file extension may or may not be required. In some cases it may be overridden by a module.</p> Example Command linePetrichor Script File name only, default directoryDirectory only, default file nameFull file path <p><pre><code>Petrichor.exe commandName --outputFile \"outputFile\"\n</code></pre> Petrichor will generate the file \"{install path}_output\\outputFile.{extension}\".</p> <p><pre><code>Petrichor.exe commandName --outputFile \"[path]\\output\\\"\n</code></pre> Petrichor will generate the file \"{path}\\output\\output.{extension}\".</p> <p><pre><code>Petrichor.exe commandName --outputFile \"[path]\\outputFile\"\n</code></pre> Petrichor will generate the file \"{path}\\outputFile.{extension}\".</p> File name only, default directoryDirectory only, default file nameFull file path <p><pre><code>output-file : \"outputFile\"\n</code></pre> Petrichor will generate the file \"{install path}_output\\outputFile.{extension}\".</p> <p><pre><code>output-file : \"&lt;path&gt;\\output\\\"\n</code></pre> Petrichor will generate the file \"{path}\\output\\output.{extension}\".</p> <p><pre><code>output-file : \"&lt;path&gt;\\outputFile\"\n</code></pre> Petrichor will generate the file \"{path}\\outputFile.{extension}\".</p>"},{"location":"user-guide/getting-started/command-usage.html#log-mode-option","title":"Log mode option","text":"<p>Command line syntax: <code>--logMode [argument]</code></p> <p>Petrichor Script syntax: <code>log-mode : &lt;argument&gt;</code></p> <p>The <code>log mode</code> option is used to control where logs are sent.</p> <p>Allowed values:</p> <ul> <li><code>all</code> (DEFAULT) - Send logs to all output locations.</li> <li><code>fileOnly</code> - Send logs only to log file.</li> <li><code>consoleOnly</code> - Send logs only to console output.</li> <li><code>none</code> - Disable logging.</li> </ul> Restrictions <p>OPTIONAL</p> Example Command linePetrichor Script <pre><code>Petrichor.exe comandName --logMode [all | fileOnly | consoleOnly | none]\n</code></pre> <pre><code>log-mode : &lt;all | fileOnly | consoleOnly | none&gt;\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#log-file-option","title":"Log file option","text":"<p>Command line syntax: <code>--logFile [argument]</code></p> <p>Petrichor Script syntax: <code>log-file : &lt;argument&gt;</code></p> <p>The <code>log file</code> option is used to specify the file name and/or directory to generate log files at.</p> <p>Relative file paths can be used.</p> <p>Note</p> <p>Log file will only be created if logging to file is enabled.</p> Restrictions <p>OPTIONAL</p> <p>If there are spaces in the argument, it must be surrounded by quotes ( <code>\"</code> ).</p> <p>A file extension is not required and will be overridden if specified.</p> Example Command line Petrichor Script File name only, default directoryDirectory only, default file nameFull file path <p><pre><code>Petrichor.exe commandName --logFile \"logFile.txt\"\n</code></pre> Petrichor will generate the file \"{install path}_log\\logFile.txt\".</p> <p><pre><code>Petrichor.exe commandName --logFile \"[path]/\"\n</code></pre> Petrichor will generate the file \"{path}{default log file name}.log\".</p> <p><pre><code>Petrichor.exe commandName --logFile \"[path]\\logFile.txt\"\n</code></pre> Petrichor will generate the file \"{path}\\logFile.txt\".</p> File name only, default directoryDirectory only, default file nameFull file path <p><pre><code>log-file : \"logFile.txt\"\n</code></pre> Petrichor will generate the file \"{install path}_log\\logFile.txt\".</p> <p><pre><code>log-file : \"&lt;path&gt;/\"\n</code></pre> Petrichor will generate the file \"{path}{default log file name}.log\".</p> <p><pre><code>log-file : \"&lt;path&gt;/logFile.txt\"\n</code></pre> Petrichor will generate the file \"{path}\\logFile.txt\".</p>"},{"location":"user-guide/getting-started/command-usage.html#running-petrichor-via-terminal","title":"Running Petrichor via terminal","text":"<p>Call the executable ( <code>.exe</code> file ) via a terminal (command prompt) to run it.</p> <p>If you run Petrichor with no arguments, it will prompt you to use the <code>--help</code> option to see available commands.</p> Example <pre><code>[install path]&gt; Petrichor.exe --help\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#running-petrichor-via-batch-file","title":"Running Petrichor via Batch file","text":"<p>If preferred, you can create a Batch file ( <code>.bat</code> file ) to run Petrichor for you.</p> <ol> <li>Make a new text file, name it whatever you want, and change its extension to <code>.bat</code>.<ul> <li>You can also open it in a text editor such as Notepad and use <code>save as \u2192 Batch file</code> to do the same thing.</li> </ul> </li> <li>Open the file in a text editor program, such as Notepad.</li> <li>Type <code>start {install path}/Petrichor.exe</code>, followed by command usage as shown above.</li> <li>Save the batch file.</li> </ol> <p>Once you've done these steps, you can run the <code>.bat</code> file by double clicking it.</p> <p>Assuming the <code>.bat</code> file was made correctly, it will run Petrichor with all the arguments you set.</p> Example Folder contents<pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n</code></pre> Command in command line argumentsCommand in input file example batch file.bat<pre><code>start Petrichor\\Petrichor.exe commandName --inputFile {path}\\inputFile.txt\n</code></pre> example batch file.bat<pre><code>start Petrichor\\Petrichor.exe {path}\\inputFile.txt\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#relative-file-paths","title":"Relative file paths","text":"<p>If you dont like having to get the full path for files, you can use relative paths instead.</p> <p><code>./</code> gets the folder the .exe file is in, and <code>../</code> gets the parent folder of that folder.</p> <p>Warning</p> <p>Relative paths can cause headaches if you dont use them right.</p> <p>Relative paths in a Batch script are by default relative to the Batch file they are in.</p> <p>Relative paths in a terminal are by default relative to Petrichor.exe.</p> <p>If Petrichor.exe is added to your PATH environment variable, relative paths used with Petrichor.exe in either place are relative to the input file.</p> Example Folder contents<pre><code>- folder/\n    - subfolder/\n        - you are here.txt\n        - example a.txt\n    - example b.txt\n</code></pre> Relative paths and equivalent absolute paths<pre><code>\"./example a.txt\" -&gt; \"folder\\subfolder\\example a.txt\"\n\"../example b.txt\" -&gt; \"folder\\example b.txt\"\n</code></pre>"},{"location":"user-guide/getting-started/command-usage.html#a-note-about-slashes-in-file-paths","title":"A note about slashes in file paths","text":"<p>On Windows, backslashes ( <code>\\</code> ) and forward slashes ( <code>/</code> ) both work the same way in file paths.</p> <p>Use whichever you prefer to.</p> <p>Warning</p> <p>Backslashes and forward slashes are not equivalent to each other in Petrichor Script.</p>"},{"location":"user-guide/getting-started/command-usage.html#adding-petrichor-to-windows-path-environment-variable","title":"Adding Petrichor to Windows PATH environment variable","text":"<p>In order to run Petrichor more easily, you can add its install path to the Windows PATH environment variable.</p> <p>If you do this, you can run Petrichor without needing to navigate to its install folder or put its full install path into the terminal.</p> <ol> <li>Navigate to your Petrichor install folder.</li> <li>Copy the folder path.</li> <li>Open the Start Menu.</li> <li>Search for \"environment variables\".</li> <li>Open <code>Edit the system environment variables</code>.</li> <li>Click the <code>Environment Variables</code> button.</li> <li>Select the <code>Path</code> variable.<ul> <li>Within the <code>User</code> variables to set locally (RECOMMENDED).</li> <li>Within the <code>System</code> variables to set globally.</li> </ul> </li> <li>Click the <code>Edit</code> button.</li> <li>Click the <code>New</code> button.</li> <li>Paste the folder path you copied in step 2.</li> <li>Click the <code>OK</code> button.</li> </ol> Example Default behaviorWith Petrichor added to PATH variable <pre><code>C:\\path\\to\\install\\folder\\Petrichor.exe commandName\n</code></pre> <pre><code>Petrichor.exe commandName\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html","title":"Petrichor Script - Getting started","text":"Petrichor Script Getting started"},{"location":"user-guide/getting-started/petrichor-script.html#syntax","title":"Syntax","text":"<p>Petrichor Script is made up of data tokens, which may be nested.</p> <p>Petrichor Script files use the extension <code>.petrichor</code> or <code>.ptcr</code>.</p>"},{"location":"user-guide/getting-started/petrichor-script.html#data-tokens","title":"Data tokens","text":"<p>All data in Petrichor input files is in the form of data tokens, or just \"tokens\".</p> <p>Some tokens are required and some are optional.</p> <p>Every token consists of a name and a value, separated by a colon ( <code>:</code> ).</p> <p>Token names are in <code>lower-kebab-case</code>.</p> <p>Token names can contain numbers, but cannot start with them.</p> <p>Note</p> <p>Whitespace around token names and values is ignored.</p> Example Valid token names<pre><code>tokenname: Value.\ntoken-name: Value.\ntoken-name-3: Value.\n</code></pre> Invalid token names<pre><code>TokenName: Value.\ntoken_name: Value.\n3-token-name: Value.\n</code></pre> Whitespace<pre><code>// These tokens are identical to Petrichor.\n token-name : Token value. \ntoken-name:Token value.\n\n// This token is different than the first two.\ntoken-name:Token   value.\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#token-bodies","title":"Token bodies","text":"<p>Some tokens can have a body containing other tokens.</p> <p>These consist of a token (which may or may not require a value), then the body, which is surrounded by curly brackets ( <code>{</code> <code>}</code> ).</p> <p>Tokens within a token body can also have bodies.</p> <p>The contents of the token's body can be indented for readability if desired, but it is not required.</p> Example <pre><code>parent-token-name:\n{\n    child-token-1-name: Value.\n    {\n        child-token-2-name: Value.\n    }\n}\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#escape-characters","title":"Escape characters","text":"<p>Backslash ( <code>\\</code> ) is treated as an \"escape character\".</p> <p>It is used to disable (aka \"escape\") the normal function of special characters and make them be treated as literal text instead.</p> <p>Tip</p> <p>You can escape an escape character.</p> Example <pre><code>// This example token treats @ as a special character and performs operations on it.\ndo-something: @to-this\n\n// In this case, the @ will be treated as literal text and no operations will be performed on it.\ndo-something: \\@but-not-to-this\n\n// Here, the escape character is escaped and treated as a literal backslash ( \\ ) character.\n// The @ is not escaped and will be treated as a special character like normal.\ndo-something: \\\\@to-this-too\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#blank-lines-and-comments","title":"Blank lines and comments","text":"<p>Blank lines are ignored.</p> <p>The sequence <code>//</code> starts a comment which continues to the end of the line and will be ignored.</p> <p>Comments can be escaped to make Petrichor treat them as regular text.</p> Example <pre><code>// This is a comment. This line will be ignored.\n// The following line is blank, and will also be ignored.\n\ntoken: value // This is an inline comment. Everything after \"//\" will be ignored.\ntoken: value \\// This is part of the value. // But this is a comment and will be ignored.\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#universal-tokens","title":"Universal tokens","text":"<p>These tokens are universal to all modules.</p> <p>Modules may support different (non-universal) contents within a universal token's body.</p> <p>Consult a module's documentation for more information.</p>"},{"location":"user-guide/getting-started/petrichor-script.html#metadata-token","title":"Metadata token","text":"<p>The <code>metadata</code> token's body contains information necessary for Petrichor to run.</p> Restrictions <p>REQUIRED</p> <p>Minimum required: 1</p> <p>Maximum allowed: 1</p> <p>Must be first token in input file.</p> Example <pre><code>metadata:\n{\n    // Metadata goes here.\n}\n\n// All other tokens go here.\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#minimum-version-token","title":"Minimum version token","text":"<p>The <code>minimum-version</code> token specifies the minimum Petrichor version required in order to parse the file.</p> <p>Version numbers are in the format <code>major.minor.patch.preview</code>.</p> <p><code>Major</code> and <code>minor</code> version must be specified.</p> <p>Info</p> <p>If <code>patch</code> version or <code>patch</code> and <code>preview</code> versions are blank, they are assumed to be any version.</p> <p>Warning</p> <p>The <code>patch</code> version cannot be blank if the <code>preview</code> version is specified.</p> <p>Tip</p> <p>Set this token's value to the minimum Petrichor version required to handle your input file.</p> Restrictions <p>REQUIRED</p> <p>Minimum required: 1</p> <p>Maximum allowed: 1</p> <p>Must be in <code>metadata</code> token body.</p> Example Major version 1, minor version 2, patch version 3, preview version pre-4<pre><code>metadata:\n{\n    minimum-version: 1.2.3.pre-4\n}\n</code></pre> Major version 1, minor version 2, patch version 3, any preview version<pre><code>metadata:\n{\n    minimum-version: 1.2.3\n}\n</code></pre> Major version 1, minor version 2, any patch or preview version<pre><code>metadata:\n{\n    minimum-version: 1.2\n}\n</code></pre> (NOT ALLOWED) Major version 1, minor version 2, blank patch version, preview version pre-4<pre><code>metadata:\n{\n    minimum-version: 1.2..pre-4 // This is not allowed by Petrichor.\n}\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#command-token","title":"Command token","text":"<p>The <code>command</code> token allows you to specify the command to run in your input file, and Petrichor will handle it automatically when run with the input file.</p> <p>Set the token's value to the name of the command to be run.</p> <p>To use command options, add a body to the token and put subtokens into it, converting the command options into token names and setting the tokens' values to the command option arguments.</p> <p>Tip</p> <p>Setting module commands with this token may be easier than command line arguments if you are not comfortable with using terminals.</p> <p>Tip</p> <p>Using this token allows you to run Petrichor by simply dragging-and-dropping the input file onto <code>Petrichor.exe</code>.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>metadata</code> token body.</p> Example Input<pre><code>metadata:\n{\n    minimum-version: &lt;version number&gt;\n    command: commandName\n    {\n        command-option-1: \"argument 1\"\n        command-option-2: \"argument 2\"\n    }\n}\n</code></pre> Command line<pre><code>[install path]&gt; Petrichor.exe input.txt\n</code></pre> <p>This is equivalent to the following:</p> Input<pre><code>metadata:\n{\n    minimum-version: &lt;version number&gt;\n}\n</code></pre> Command line<pre><code>[install path]&gt; Petrichor.exe commandName --inputFile input.txt --commandOption1 \"argument 1\" --commandOption2 \"argument 2\"\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#module-options-token","title":"Module options token","text":"<p>The <code>module-options</code> token allows you to configure module-specific options, if supported by a module.</p> <p>Note</p> <p>Each module that supports this token will have its own version of it.</p> <p>See the relevant module's documentation for more information.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must come after <code>metadata</code> token.</p> Example <pre><code>metadata:\n{\n    // Metadata goes here.\n}\n\nmodule-options:\n{\n    // Supported tokens depend on module in use.\n}\n</code></pre>"},{"location":"user-guide/getting-started/petrichor-script.html#module-specific-tokens","title":"Module-specific tokens","text":"<p>Modules have unique tokens that are specific to their functions.</p> <p>See the relevant module's documentation for information about its tokens.</p>"},{"location":"user-guide/modules/index.html","title":"Modules","text":"Modules"},{"location":"user-guide/modules/index.html#text-shortcut-script-generation","title":"Text Shortcut Script Generation","text":"<p>This module allows you to generate a text shortcut script (aka \"find and replace\" script) with a Petrichor Script input file.</p> <p>Scripts generated by this module can be used to automatically insert long strings of text with short key sequences.</p> <p>The main benefit is to reduce typing without needing to rely on copy-and-pasting.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html","title":"Text Shortcut Script Generation - Modules","text":"Text Shortcut Script Generation Modules"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#purpose","title":"Purpose","text":"<p>This module allows you to generate a text shortcut script (aka \"find and replace\" script) with a Petrichor Script input file.</p> <p>Scripts generated by this module can be used to automatically insert long strings of text with short key sequences.</p> <p>The main benefit is to reduce typing without needing to rely on copy-and-pasting.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#petrichor-script","title":"Petrichor Script","text":"<p>See documentation for Petrichor Script input syntax.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#command-usage","title":"Command usage","text":"<p>See documentation for command syntax and usage.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/index.html#running-output-scripts","title":"Running output scripts","text":"<p>See documentation for running text shortcut scripts.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/command-usage.html","title":"Command usage - Text Shortcut Script Generation - Modules","text":"Command usage Text Shortcut Script Generation"},{"location":"user-guide/modules/text-shortcut-script-generation/command-usage.html#generatetextshortcutscript-command","title":"generateTextShortcutScript command","text":"<p>To generate a text hotstring shortcut script, call Petrichor with the command argument <code>generateTextShortcutScript</code>.</p> <p>This command supports the following options:</p> <ul> <li>Input file</li> <li>Output file</li> <li>Log mode</li> <li>Log file</li> </ul> Example Command linePetrichor Script <pre><code>[install path]&gt; Petrichor.exe generateTextShortcutScript --inputFile [file] --outputFile [file] --logMode [mode] --logFile [file]\n</code></pre> <pre><code>metadata:\n{\n    command: generateTextShortcutScript\n    {\n        // input-file: Implict when command is in input file.\n        output-file: &lt;file&gt;\n        log-mode: &lt;mode&gt;\n        log-file: &lt;file&gt;\n    }\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html","title":"Petrichor Script - Text Shortcut Script Generation - Modules","text":"Petrichor Script Text Shortcut Script Generation"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#module-options-token","title":"Module options token","text":"<p>This module's variant of the module options token supports the following tokens.</p> <ul> <li>Default icon</li> <li>Suspend icon</li> <li>Reload shortcut</li> <li>Suspend shortcut</li> </ul> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must come after <code>metadata</code> token.</p> Example <pre><code>metadata:\n{\n    // Metadata goes here.\n}\n\nmodule-options:\n{\n    // Module-specific options go here.\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#default-icon-and-suspend-icon-tokens","title":"Default icon and suspend icon tokens","text":"<p>These tokens allow you to specify file paths to custom icons for a text shortcut script.</p> <p>The <code>default-icon</code> token sets the file path of the icon shown on a script by default.</p> <p>The <code>suspend-icon</code> token sets the file path of the icon shown when a script is suspended.</p> <p>Relative file paths can be used.</p> <p>Note</p> <p>File paths can be surrounded with quotes, but they do not need to be.</p> <p>Warning</p> <p>If you move an icon file and do not update its path in your input file, the icon will not be found and will not be applied.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>module-options</code> token body.</p> Example <pre><code>module-options:\n{\n    default-icon: &lt;path&gt;/default.ico\n    suspend-icon: \"./suspend_icon.png\"\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#reload-shortcut-and-suspend-shortcut-tokens","title":"Reload shortcut and suspend shortcut tokens","text":"<p>These tokens allow you to set keyboard shortcuts to control the operation of a script.</p> <p>The <code>reload-shortcut</code> token sets a keyboard shortcut to reload a script.</p> <p>The <code>suspend-shortcut</code> token sets a keyboard shortcut to suspend and resume a script.</p> <p>These keyboard shortcuts can be written in AutoHotkey v2 syntax, but for simplicity, Petrichor supports a find-and-replace table of common modifier keys.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>module-options</code> token body.</p> Example <pre><code>module-options:\n{\n    reload-shortcut: &lt;shortcut&gt;\n    suspend-shortcut: &lt;shortcut&gt;\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#control-shortcut-find-and-replace-table","title":"Control shortcut find-and-replace table","text":"<p>Petrichor supports the following tags in script control shortcuts.</p> Tag Alias Encodes for Key / symbol name <code>[windows]</code> <code>[win]</code> Win Windows key <code>[alt]</code> Alt Alt key <code>[left-alt]</code> <code>[lalt]</code> Left Alt Left Alt key <code>[right-alt]</code> <code>[ralt]</code> Right Alt Right Alt key <code>[control]</code> <code>[ctrl]</code> Ctrl Control key <code>[left-control]</code> <code>[lctrl]</code> Left Ctrl Left Control key <code>[right-control]</code> <code>[rctrl]</code> Right Ctrl Right Control key <code>[shift]</code> Shift Shift key <code>[left-shift]</code> <code>[lshift]</code> Left Shift Left Shift key <code>[right-shift]</code> <code>[rshift]</code> Right Shift Right Shift key <code>[combine]</code> <code>[and]</code> &amp; AutoHotkey combine (Ampersand symbol) <code>[alt-graph]</code> <code>[altgr]</code> AltGr AltGraph key <code>[wildcard]</code> <code>[asterisk]</code> * AutoHotkey wildcard (Asterisk symbol) <code>[passthrough]</code> <code>[tilde]</code> ~ AutoHotkey passthrough (Tilde symbol) <code>[send]</code> <code>[dollar]</code> $ AutoHotkey send (Dollar sign) <code>[tab]</code> Tab Tab key <code>[caps-lock]</code> <code>[caps]</code> Caps Lock CapsLock key <code>[enter]</code> Enter Enter key <code>[backspace]</code> <code>[bksp]</code> Backspace Backspace key <code>[insert]</code> <code>[ins]</code> Ins Insert key <code>[delete]</code> <code>[del]</code> Del Delete key <code>[end]</code> End End key <code>[home]</code> Home Home key <code>[page-up]</code> <code>[pgup]</code> Page Up PageUp key <code>[page-down]</code> <code>[pgdn]</code> Page Down PageDown key <code>[open-bracket]</code> <code>\\[</code> [ Left square bracket <code>[close-bracket]</code> <code>\\]</code> ] Right square bracket <p>Note</p> <p><code>\\[</code> and <code>\\]</code> make use of escape characters.</p> Example <pre><code>module-options:\n{\n    reload-shortcut: [win]r // Windows key + R\n    suspend-shortcut: \\[win\\]s // [win]s\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#shortcut-list-token","title":"Shortcut list token","text":"<p>This token contains definitions for the text shortcuts to be generated.</p> Restrictions <p>REQUIRED</p> <p>Mininum required: 1</p> <p>Maximum allowed: 1</p> <p>Must come after <code>metadata</code> token.</p> Example <pre><code>metadata:\n{\n    // Metadata goes here.\n}\n\nshortcut-list:\n{\n    // Shortcuts go here.\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#shortcut-token","title":"Shortcut token","text":"<p>The <code>shortcut</code> token defines a plaintext shortcut.</p> <p>This token's values can use AutoHotkey special behavior if written correctly. Consult AutoHotkey documentation to learn more about this.</p> <p>Shortcuts consist of 3 parts: A hotstring, a divider consisting of 2 right-angle brackets ( <code>&gt;&gt;</code> ), and a replacement string.</p> <p>Note</p> <p>These components can have whitespace between them.</p> <p>This whitespace will be trimmed off unless you force it to be kept in by surrounding it with backticks ( <code>`</code> ).</p> <p>Warning</p> <p>You cannot use <code>::</code> in a hotstring due to the way AutoHotkey hotstrings work.</p> <p>Petrichor will allow you to do it, but the generated shortcuts will not work.</p> <p>Escaping the characters will not fix this.</p> Restrictions <p>OPTIONAL</p> <p>No restrictions on number of instances that can be present.</p> <p>Must be in <code>shortcut-list</code> token body.</p> Example Input<pre><code>shortcut-list:\n{\n    shortcut: &lt;hotstring&gt; &gt;&gt; ` &lt;replacement string&gt; `\n}\n</code></pre> Shortcuts generated from input<pre><code>; This is a standard shortcut. The &lt;hotstring&gt; and &lt;replacement string&gt; will be inserted into the output file unaltered.\n::&lt;hotstring&gt;::` &lt;replacement string&gt; `\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#shortcut-template-token","title":"Shortcut template token","text":"<p>The <code>shortcut-template</code> token defines a templated shortcut.</p> <p>It behaves the same way as the shortcut token, but with additional features.</p> <p>Shortcuts will be generated from the template, filling in <code>[field]</code> tags with user-provided data.</p> <p>Supported fields:</p> <ul> <li><code>[color]</code></li> <li><code>[decoration]</code></li> <li><code>[id]</code></li> <li><code>[name]</code></li> <li><code>[last-name]</code></li> <li><code>[last-tag]</code></li> <li><code>[pronoun]</code></li> <li><code>[tag]</code></li> </ul> <p>Additional features are supported via subtokens.</p> <p>If no subtokens are used, this token does not need a body.</p> <p>Note</p> <p>By default, you cannot use the <code>[</code> or <code>]</code> symbols in a template. Use escape characters to circumvent this.</p> <p>Warning</p> <p>You cannot use <code>::</code> in a hotstring due to the way AutoHotkey hotstrings work.</p> <p>Petrichor will allow you to do it, but the generated shortcuts will not work.</p> <p>Escaping the characters will not fix this.</p> Restrictions <p>OPTIONAL</p> <p>No restrictions on number of instances that can be present.</p> <p>Must be in <code>shortcut-list</code> token body.</p> Example Input<pre><code>shortcut-list:\n{\n    shortcut-template: [tag] [last-tag] &gt;&gt; [id] - [name] [last-name] ([pronoun]) | {[decoration]} | [color]\n}\n</code></pre> Shortcuts generated from input<pre><code>::sm smt::1234 - Sam Smith (they/them) | {a person} | #123456\n::jo brn::5678 - Joe Brown (they/them) | {another person person} | #789abc\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#find-and-replace-tokens","title":"Find and replace tokens","text":"<p>The <code>find</code> and <code>replace</code> token pair defines a custom find-and-replace dictionary for a <code>shortcut-template</code> token.</p> <p>The find-and-replace dictionary is only applied to the template's replacement string.</p> <p>It is applied after <code>[field]</code> tags are populated with data, and therefore can modify that data.</p> <p><code>Find keys</code> and <code>replace values</code> are defined in comma-separated lists surrounded by curly brackets ( <code>{</code> <code>}</code> ).</p> <p>The <code>find</code> and <code>replace</code> lists cannot contain blank items.</p> <p>The <code>find</code> and <code>replace</code> lists must contain the same number of items as each other.</p> <p>Note</p> <p><code>Find keys</code> are case-sensitive.</p> <p>Note</p> <p>If a <code>find</code> token does not have a matching <code>replace</code> token, all the <code>find</code> keys will just be removed from the template.</p> Find token restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>shortcut-template</code> token body.</p> Replace token restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>shortcut-template</code> token body.</p> <p>Must come after <code>find</code> token.</p> Example Input<pre><code>shortcut-list:\n{\n    shortcut-template: &lt;hotstring&gt; &gt;&gt; &lt;replacement string&gt; custom find 1, custom find 2, Custom find 2\n    {\n        find: { custom find 1, custom find 2 } // These are the `find keys`.\n        replace: { replace 1, replace 2 } // These are the corresponding `replace values`.\n    }\n    shortcut-template: &lt;hotstring&gt; &gt;&gt; &lt;replacement string&gt; custom remove 1, custom remove 2, Custom remove 2\n    {\n        find: { custom remove 1, custom remove 2 } // These `find keys` will be removed, since there are no `replace values` for them.\n    }\n}\n</code></pre> Shortcuts generated from input<pre><code>::&lt;hotstring&gt;::&lt;replacement string&gt; replace 1, replace 2, Custom find 2\n::&lt;hotstring&gt;::&lt;replacement string&gt; , , Custom remove 2\n</code></pre> <p>If the <code>find keys</code> are present in <code>[field]</code> values within the <code>&lt;replacement string&gt;</code>, they will be replaced there as well.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#text-case-token","title":"Text case token","text":"<p>The <code>text-case</code> token is used to change the text case of a shortcut after it is generated from a template.</p> <p>Case conversion is applied after <code>[field]</code> tags are populated and find-and-replace dictionaries are applied.</p> <p>Allowed values:</p> <ul> <li>unchanged (as-written; default)</li> <li>upper (UPPER CASE)</li> <li>lower (lower case)</li> <li>firstCaps (First Capitals Case)</li> </ul> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>shortcut-template</code> token body.</p> Example unchangedupperlowerfirstCaps Input<pre><code>shortcut-list:\n{\n    shortcut-template: &lt;hotstring&gt; &gt;&gt; &lt;replacement STRING&gt;\n    {\n        text-case: unchanged\n    }\n}\n</code></pre> Shortcuts generated from input<pre><code>::&lt;hotstring&gt;::&lt;replacement STRING&gt;\n</code></pre> Input<pre><code>shortcut-list:\n{\n    shortcut-template: &lt;hotstring&gt; &gt;&gt; &lt;replacement STRING&gt;\n    {\n        text-case: upper\n    }\n}\n</code></pre> Shortcuts generated from input<pre><code>::&lt;hotstring&gt;::&lt;REPLACEMENT STRING&gt;\n</code></pre> Input<pre><code>shortcut-list:\n{\n    shortcut-template: &lt;hotstring&gt; &gt;&gt; &lt;replacement STRING&gt;\n    {\n        text-case: lower\n    }\n}\n</code></pre> Shortcuts generated from input<pre><code>::&lt;hotstring&gt;::&lt;replacement string&gt;\n</code></pre> Input<pre><code>shortcut-list:\n{\n    shortcut-template: &lt;hotstring&gt; &gt;&gt; &lt;replacement STRING&gt;\n    {\n        text-case: firstCaps\n    }\n}\n</code></pre> Shortcuts generated from input<pre><code>::&lt;hotstring&gt;::&lt;Replacement String&gt;\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#entry-list-token","title":"Entry list token","text":"<p>The <code>entry-list</code> token contains entries to apply to templated shortcuts.</p> Restrictions <p>REQUIRED</p> <p>Minimum required: 1</p> <p>Maximum allowed: 1</p> <p>Must come after <code>metadata</code> token.</p> Example <pre><code>metadata:\n{\n    // Metadata goes here.\n}\n\nentry-list:\n{\n    // Entries go here.\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#entry-token","title":"Entry token","text":"<p>The <code>entry</code> token defines a set of data to populate a templated shortcut with.</p> <p>This token's value is ignored, but will show up in logs. You can put notes into it if desired.</p> <p>This token's body contains subtokens defining its data.</p> <p>These subtokens correspond to the <code>[field]</code> tags in templated shortcuts.</p> <p>Warning</p> <p>All token values should be unique, even though Petrichor wont take issue with it.</p> <p>If a value is repeated, the script generated from the input data can misbehave in unpredictable ways.</p> Restrictions <p>OPTIONAL</p> <p>No restrictions on number of instances that can be present.</p> <p>Must be in <code>entry-list</code> token body.</p> Example <pre><code>entry-list:\n{\n    entry: Notes about entry.\n    {\n        // Entry data goes here.\n    }\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#color-token","title":"Color token","text":"<p>The <code>color</code> token defines a value for the <code>[color]</code> field tag in templated shortcuts.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>entry</code> token body.</p> Example <pre><code>entry:\n{\n    color: &lt;value&gt;\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#decoration-token","title":"Decoration token","text":"<p>The <code>decoration</code> token defines a value for the <code>[decoration]</code> field tag in templated shortcuts.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>entry</code> token body.</p> Example <pre><code>entry:\n{\n    decoration: &lt;value&gt;\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#id-token","title":"ID token","text":"<p>The <code>id</code> token defines a value for the <code>[id]</code> field tag in templated shortcuts.</p> Restrictions <p>REQUIRED</p> <p>Minimum required: 1</p> <p>Maximum allowed: 1</p> <p>Must be in <code>entry</code> token body.</p> Example <pre><code>entry:\n{\n    id: &lt;value&gt;\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#name-token","title":"Name token","text":"<p>The <code>name</code> token defines values for the <code>[name]</code> and <code>[tag]</code> field tags in templated shortcuts.</p> <p>A shortcut will be generated from each template for each <code>name</code> token in an entry.</p> <p><code>Name</code> token values must consist of a <code>[name]</code> and <code>[tag]</code> field, separated by an at-sign ( <code>@</code> ).</p> <p>The <code>[name]</code> field value can be any non-blank string that does not contain an at-sign ( <code>@</code> ).</p> <p>The <code>[tag]</code> field value can be any string that does not contain whitespace.</p> Restrictions <p>REQUIRED</p> <p>Minimum required: 1</p> <p>Must be in <code>entry</code> token body.</p> Example <pre><code>entry:\n{\n    name: name string @tagstring\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#last-name-token","title":"Last name token","text":"<p>The <code>last-name</code> token defines values for the <code>[last-name]</code> and <code>[last-tag]</code> field tags in templated shortcuts.</p> <p>The <code>last-name</code> token has the same structure as the <code>name</code> token.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>entry</code> token body.</p> Example <pre><code>entry:\n{\n    last-name: name string @tagstring\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#pronoun-token","title":"Pronoun token","text":"<p>The <code>pronoun</code> token defines a value for the <code>[pronoun]</code> field tag in templated shortcuts.</p> Restrictions <p>OPTIONAL</p> <p>Maximum allowed: 1</p> <p>Must be in <code>entry</code> token body.</p> Example <pre><code>entry:\n{\n    pronoun: &lt;value&gt;\n}\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/petrichor-script.html#full-usage-example","title":"Full usage example","text":"Example Input<pre><code>metadata:\n{\n    // Metadata goes here.\n}\n\n\nmodule-options:\n{\n    default-icon: &lt;file path&gt;\n    suspend-icon: &lt;file path&gt;\n    reload-shortcut: &lt;shortcut&gt;\n    suspend-shortcut: &lt;shortcut&gt;\n}\n\n\nshortcut-list:\n{\n    shortcut: replaceme &gt;&gt; withme\n    shortcut-template: [tag] &gt;&gt; [name] [last-name] ([pronoun]) [decoration]\n    {\n        find: { this, that }\n        replace: { these, those }\n        text-case: firstCaps\n    }\n}\n\n\nentry-list:\n{\n    entry: A\n    {\n        id: idValueA\n        last-name: last name value A @lastTagValueA\n        name: name value A 1 @tagValueA1\n        name: name value A 2 @tagValueA2\n        pronoun: pronounValueA this\n        decoration: decorationValueA that\n        color: colorValueA\n    }\n\n    entry: B\n    {\n        id: idValueB\n        last-name: last name value B @lastTagValueB\n        name: name value B 1 @tagValueB1\n        name: name value B 2 @tagValueB2\n        pronoun: pronounValueB THIS\n        decoration: decorationValueB THAT\n        color: colorValueB\n    }\n}\n</code></pre> Shortcuts generated from input<pre><code>::replaceme::withme\n::tagValueA1::Name Value A 1 Last Name Value A (Pronounvaluea These) Decorationvaluea Those\n::tagValueA2::Name Value A 2 Last Name Value A (Pronounvaluea These) Decorationvaluea Those\n::tagValueB1::Name Value B 1 Last Name Value B (Pronounvalueb This) Decorationvalueb That\n::tagValueB2::Name Value B 2 Last Name Value B (Pronounvalueb This) Decorationvalueb That\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html","title":"Running output scripts - Text Shortcut Script Generation - Modules","text":"Running output scripts Text Shortcut Script Generation"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#requirements","title":"Requirements","text":"<p>The requirements to be able to use a text shortcut script generated by Petrichor are listed below.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#autohotkey","title":"AutoHotkey","text":"<p>The scripts that this module generates are AutoHotkey v2 scripts.</p> <p>In order to run them, you will need to install AutoHotkey v2.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#running-text-shortcut-scripts","title":"Running text shortcut scripts","text":"<p>With AutoHotkey installed, simply double-click the script ( <code>.ahk</code> file ).</p> <p>You can also right-click on it and click <code>run</code> in the context menu.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#automatically-run-scripts-after-generating-them","title":"Automatically run scripts after generating them","text":"<p>You can make a batch script wait for Petrichor to finish running and launch the output script automatically.</p> <ol> <li>Create a batch script using the steps linked above.</li> <li>After the <code>start</code> keyword, add <code>/wait</code>. This will cause the batch script to wait until Petrichor is closed before continuing.</li> <li>Add a new line to the batch script, and enter <code>start {path/script.ahk}</code>.</li> <li>Save the batch file.</li> </ol> <p>Once you've done these steps, you can run the <code>.bat</code> file by double clicking it.</p> <p>If the <code>.bat</code> file was made correctly, it will run Petrichor, wait until it closes, then launch the output script.</p> <p>Note</p> <p>If Petrichor fails to generate a new output script, the Batch script will launch any existing version of the output script instead.</p> Example Folder contents<pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n</code></pre> Command in command line argumentsCommand in input file example batch file.bat<pre><code>start /wait {install path}\\Petrichor.exe commandName --inputFile ..\\inputFile.txt\nstart outputFile.ahk\n</code></pre> example batch file.bat<pre><code>start /wait {install path}\\Petrichor.exe ..\\inputFile.txt\nstart outputFile.ahk\n</code></pre>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#launching-scripts-automatically-on-startup","title":"Launching scripts automatically on startup","text":"<p>There are a few options to launch scripts automatically when Windows logs in.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#windows-startup-shortcut","title":"Windows Startup shortcut","text":"<p>Recommended</p> <p>This is the simplest and most reliable method.</p> <ol> <li>Right-click the script in File Explorer.</li> <li>Click <code>Create shortcut</code> in the dropdown menu.</li> <li>Press <code>Win+R</code> to open the Windows Run dialog.<ul> <li>You can also open the Start Menu and search for <code>Run</code>.</li> </ul> </li> <li>Type <code>shell:startup</code> into the dialog, then click OK.</li> <li>The <code>Startup</code> folder will open. Copy the shortcut you created in step 2 into it.</li> </ol>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#task-scheduler","title":"Task Scheduler","text":"<p>Not recommended</p> <p>This method is unreliable, tedious and awkward to set up, and easy to break.</p> <p>The Windows Startup method is easier and more reliable.</p> <p>Using this method is only recommended if the Windows Startup method does not work.</p> <p>Follow the directions here to set it up.</p>"},{"location":"user-guide/modules/text-shortcut-script-generation/running-output-scripts.html#registry-caution","title":"Registry (CAUTION)","text":"<p>Strongly not recommended</p> <p>It is strongly reecommended to use one of the other methods above.</p> <p>Only use this method if no other method works and you are willing to risk breaking your computer.</p> <p>Danger</p> <p> DO NOT DO THIS UNLESS YOU KNOW EXACTLY WHAT YOU'RE DOING.</p> <p>Editing the registry can potentially brick your computer.</p> <p>Follow these steps at your own risk.</p> <p>If you fuck around and find out, it is your own damn fault.</p> Instructions <ol> <li>Open the Registry Editor. There are two days to do this:<ul> <li>Press <code>Win+R</code> to open the Run dialog, type in <code>regedit</code>, then click OK.</li> <li>Open the Start menu and search for either <code>regedit</code> or <code>Registry Editor</code>.</li> </ul> </li> <li>BACK UP YOUR REGISTRY BEFORE MAKING ANY EDITS. DO THIS EVERY TIME.<ol> <li>Click the <code>File</code> button in the toolbar.</li> <li>Click <code>Export</code> in the dropdown menu.</li> <li>Enter a file name and save the file. Use an obvious file name and save the file somewhere you will find it again later.</li> </ol> </li> <li>Navigate to <code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code>.</li> <li>Add a new String key. Name it however you prefer. Make sure the name will make sense to you later.</li> <li>Edit the value of the new string key and put in <code>\"@:\\path\\to\\autohotkey\\version\\file.exe\" \"@:\\path\\to\\script\\file.ahk\"</code>, using the file paths of your AutoHotkey installation and your script file.</li> </ol> <p>If in doubt, restore the registry backup you made in step 2.</p>"}]}