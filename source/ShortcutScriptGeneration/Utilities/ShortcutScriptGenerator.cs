using Petrichor.ShortcutScriptGeneration.Containers;
using Petrichor.ShortcutScriptGeneration.LookUpTables;
using Petrichor.Common.Info;
using Petrichor.Common.Utilities;
using Petrichor.Logging;
using System.Text;


namespace Petrichor.ShortcutScriptGeneration.Utilities
{
	public class ShortcutScriptGenerator
	{
		private string outputFilePath = string.Empty;


		private ShortcutScriptInput Input { get; set; }


		public ShortcutScriptGenerator( ShortcutScriptInput input )
		{
			Input = input;
		}


		public void GenerateScript( string outputFile)
		{
			var outputDirectory = GetNormalizedOutputDirectory(outputFile);
			var outputFileName = GetNormalizedOutputFileName(outputFile);
			outputFilePath = $"{outputDirectory}{outputFileName}";

			var taskMessage = $"generating output file \"{outputFilePath}\"";
			Log.TaskStarted(taskMessage);

			try
			{
				Directory.CreateDirectory(outputDirectory);
				WriteHeaderToFile();
				WriteMacrosToFile();
			}
			catch (Exception ex)
			{
				var errorMessage = $"failed to generate output file ({outputFilePath})";
				Log.Error(errorMessage);
				throw new Exception(errorMessage, ex);
			}
			Log.TaskFinished(taskMessage);
		}

		private string GetNormalizedOutputDirectory(string outputFile)
		{
			var outputDirectory = outputFile.GetDirectory();
			if (outputDirectory == string.Empty)
			{
				return ProjectDirectories.OutputDirectory;
			}
			return outputDirectory;
		}

		private string GetNormalizedOutputFileName(string outputFile)
		{
			return $"{outputFile.GetFileName().RemoveFileExtension()}.ahk";
		}


		private void WriteByteOrderMarkToFile()
		{
			var encoding = Encoding.UTF8;
			using ( FileStream stream = new FileStream( outputFilePath, FileMode.Create ) )
			{
				using ( BinaryWriter writer = new BinaryWriter( stream, encoding ) )
				{
					writer.Write( encoding.GetPreamble() );
				}
			}
		}

		private void WriteHeaderToFile()
		{
			var taskMessage = "writing header to output file";
			Log.TaskStarted( taskMessage );
			WriteByteOrderMarkToFile();
			var header = new string[]
			{
				$"; Generated by { AppInfo.AppNameAndVersion } AutoHotkey shortcut script generator",
				"; https://github.com/SparkliTtwizzl/petrichor",
				"",
				"",
				"#SingleInstance Force",
				"",
			};
			WriteLinesToFile( header );
			Log.TaskFinished( taskMessage );
		}

		private void WriteLineToFile( string line = "" )
		{
			try
			{
				using ( StreamWriter writer = File.AppendText( outputFilePath ) )
				{
					writer.WriteLine( line );
				}
			}
			catch ( Exception ex )
			{
				var errorMessage = "failed to write line to output file";
				Log.Error( errorMessage );
				throw new FileLoadException( errorMessage, ex );
			}
		}

		private void WriteLinesToFile( string[] data )
		{
			var linesWritten = 0;
			foreach ( string line in data )
			{
				WriteLineToFile( line );
				++linesWritten;
			}
			Log.Info( $"wrote { linesWritten } lines to output file" );
		}

		private void WriteMacrosToFile()
		{
			var taskMessage = "writing macros to output file";
			Log.TaskStarted( taskMessage );
			WriteLinesToFile( Input.Macros );
			Log.TaskFinished( taskMessage );
		}
	}
}
