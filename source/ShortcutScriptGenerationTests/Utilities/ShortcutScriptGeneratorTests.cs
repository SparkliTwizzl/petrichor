using Microsoft.VisualStudio.TestTools.UnitTesting;
using Petrichor.Common.Info;
using Petrichor.ShortcutScriptGeneration.Containers;
using Petrichor.TestShared.Info;
using Petrichor.TestShared.Utilities;


namespace Petrichor.ShortcutScriptGeneration.Utilities.Tests
{
	[ TestClass ]
	public class ShortcutScriptGeneratorTests
	{
		public struct TestData
		{
			public static ShortcutScriptEntry[] Entries => new[]
			{
				new ShortcutScriptEntry( new(){ new( "name", "tag" ) }, "pronoun", "decoration" ),
			};
			public static string[] Templates => new[]
			{
				"::@`tag`:: `name`",
				"::@$&`tag`:: `name` `pronoun` `decoration`",
			};
			public static ShortcutScriptInput Input => new( Metadata!, Entries!, Templates!, Macros! );
			public static string[] Macros => new[]
			{
				"::@tag:: name",
				"::@$&tag:: name pronoun decoration",
			};
			public static ShortcutScriptMetadata Metadata => new( TestAssets.DefaultIconFilePath );
			public static string[] GeneratedOutputFileContents => new[]
			{
				$"; Generated by { AppInfo.AppNameAndVersion } AutoHotkey shortcut script generator",
				"; https://github.com/SparkliTtwizzl/petrichor",
				"",
				"",
				"#SingleInstance Force",
				"",
				$"defaultIcon := \"{ TestAssets.DefaultIconFilePath }\"",
				"if ( defaultIcon != \"\" )",
				"{",
				"	IfExist, %defaultIcon%",
				"	{",
				"		Menu, Tray, Icon, %defaultIcon%",
				"	}",
				"}",
				"",
				"",
				"::@tag:: name",
				"::@$&tag:: name pronoun decoration",
			};
		}


		public ShortcutScriptGenerator? scriptGenerator;


		[TestInitialize ]
		public void Setup()
		{
			TestUtilities.InitializeLoggingForTests();
			scriptGenerator = new ShortcutScriptGenerator( TestData.Input );
		}


		[ TestMethod ]
		public void GenerateScriptTest_Success()
		{
			var outputFile = $@"{ TestDirectories.TestOutputDirectory }\{ nameof( ShortcutScriptGenerator ) }_{ nameof( GenerateScriptTest_Success ) }.ahk";
			scriptGenerator!.GenerateScript( outputFile );

			var expected = TestData.GeneratedOutputFileContents;
			var actual = File.ReadAllLines( outputFile );
			CollectionAssert.AreEqual( expected, actual );
		}
	}
}