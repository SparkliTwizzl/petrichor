{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Petrichor /\u02c8p\u025btr\u026a\u02cck\u0254\u02d0r/ (noun) The scent of damp earth, particularly after rain. Part of the Trioxichor project. PluralityUtilities version 0.7 - 2023-07-24 <p>Important</p> <p>This is legacy documentation, provided as-is.</p> <p>This version of the project is no longer supported or maintained.</p>"},{"location":"index.html#1-what-is-it","title":"1 - what is it?","text":"<p>This tool is a command-line app with utilities intended to be useful to plural systems.</p>"},{"location":"index.html#2-what-does-it-do","title":"2 - what does it do?","text":"<p>Currently the only utility it supports is generating AutoHotkey scripts to replace short sequences of text (tags) with longer strings with names, pronouns, and similar information. These scripts can be written by hand, but learning how to use AutoHotkey is required, and they're hard to make changes to if you ever want to, for example, change your name or your pronouns.</p>"},{"location":"index.html#3-autohotkey-whats-that","title":"3 - AutoHotkey? what's that?","text":"<p>The scripts generated by the tool do nothing on their own. They are intended to be run with AutoHotkey, a Windows scripting tool intended for automation, and without it, they're just a glorified text file.</p>"},{"location":"index.html#4-how-do-i-use-it","title":"4 - how do i use it?","text":"<p>In order to get a useful result from the tool, there are four main steps:</p> <ol> <li>write an input file</li> <li>write a templates file</li> <li>run the tool using the above</li> <li>run the resulting script with AutoHotkey</li> </ol>"},{"location":"index.html#41-input-files","title":"4.1 - input files","text":""},{"location":"index.html#411-input-files-are-made-up-of-entries-which-contain-fields","title":"4.1.1 - Input files are made up of entries, which contain fields.","text":"<p>Each entry represents a person and must contain at least one identity (a name paired with a tag).</p> <p>To write an entry, start with an open curly brace <code>{</code> on one line and a close curly brace <code>}</code> on another, with nothing else on those lines.</p> Example <pre><code>{\n}\n</code></pre>"},{"location":"index.html#412-between-the-braces-write-the-fields-for-the-entry-on-separate-lines","title":"4.1.2 - Between the braces, write the fields for the entry on separate lines.","text":"<p>Whitespace at the start of lines for fields is ignored, so feel free to indent or not as you prefer to.</p> <p>Fields are identified by marker symbols:</p> <ul> <li><code>#name#</code><ul> <li>Name fields are a sub-field of identity fields (see below).</li> <li>Name fields must be surrounded on both sides by hash symbols <code>#</code>.</li> <li>Note that this means that name fields cannot contain hash symbols.</li> </ul> </li> <li><code>@tag</code><ul> <li>Tag fields are a sub-field of identity fields (see below).</li> <li>Tag fields cannot contain spaces.</li> </ul> </li> <li><code>$pronoun</code><ul> <li>Pronoun fields are optional.</li> <li>Entries cannot have more than one pronoun field.</li> </ul> </li> <li><code>&amp;decoration</code><ul> <li>Decoration fields are optional.</li> <li>Entries cannot have more than one decoration field.</li> </ul> </li> </ul> <p>Identity fields are a special case, as they consist of pairs of name and tag fields:</p> <ul> <li><code>% #name# @tag</code><ul> <li>Every entry must contain at least one identity field.</li> <li>There is no upper limit to how many identity fields an entry can have.</li> </ul> </li> </ul> Example <pre><code>{\n    % #Sam# @sm\n    $they/them\n    &amp;-- a person\n}\n</code></pre>"},{"location":"index.html#413-theres-no-limit-on-how-many-entries-an-input-file-can-have-and-entries-and-fields-dont-have-to-be-unique","title":"4.1.3 - There's no limit on how many entries an input file can have, and entries and fields dont have to be unique.","text":"<p>If you want to, for example, have the same set of names paired with a different pronoun and/or decoration, you can include multiple entries that are the same aside from small changes (see below).</p> <p>Important</p> <p>All tag fields should be unique in order for the generated script to work correctly, even though PluralityUtilities wont take issue with it. If a tag field is repeated, only the first one in the script will work.</p> Example <pre><code>{\n    % #Sam# @sm\n    % #Sammy# @smy\n}\n{\n    % #Sam# @sm-t\n    % #Sammy# @smy-t\n    $they/them\n    &amp;-- a person\n}\n{\n    % #Sam# @sm-h\n    % #Sammy# @smy-h\n    $he/him\n    &amp;-- a person\n}\n{\n    % #Sam# @sm-s\n    % #Sammy# @smy-s\n    $she/her\n    &amp;-- a person\n}\n</code></pre>"},{"location":"index.html#42-template-files","title":"4.2 - template files","text":"<p>In order for PluralityUtilities to know what format(s) you want the macros in your script to have, you need to provide templates for them.</p>"},{"location":"index.html#421-templates-must-use-the-same-basic-structure-in-order-for-the-generated-script-to-work","title":"4.2.1 - Templates must use the same basic structure in order for the generated script to work.","text":"<p>All templates have to start with two colons <code>::</code>, a string of text including an at sign <code>@</code> representing the tag, then two more colons <code>::</code>.</p> <p>The tag string can be anything you want, as long as it contains at least one at sign <code>@</code> and no spaces. Additional text is optional.</p> <p>If this is not followed, the generated script wont work, even though PluralityUtilities will run without errors.</p> Example <pre><code>::@::\u2190 the rest of the template must come after this\n</code></pre>"},{"location":"index.html#422-templates-must-contain-marker-symbols-for-the-tool-to-replace-in-order-for-them-to-do-anything","title":"4.2.2 - Templates must contain marker symbols for the tool to replace in order for them to do anything.","text":"<p>Certain symbols will be replaced by fields from entries in the input file by default. This is how templates are able to be used to generate macros.</p> <p>Below is a list of the marker symbols and the fields they will be replaced by when the tool runs:</p> <ul> <li><code># \u2192 name</code></li> <li><code>@ \u2192 tag</code></li> <li><code>$ \u2192 pronoun</code></li> <li><code>&amp; \u2192 decoration</code></li> </ul> Example <p>input: <pre><code>{\n    % #Sam# @sm\n    % #Sammy# @smy\n    $they/them\n    &amp;-- a person\n}\n</code></pre></p> <p>templates: <pre><code>::@::# ($) | [&amp;]\n</code></pre></p> <p>result: <pre><code>::sm::Sam (they/them) | [-- a person]\n::smy::Sammy (they/them) | [-- a person]\n</code></pre></p>"},{"location":"index.html#423-you-can-use-each-marker-symbol-in-a-template-as-many-times-as-you-want","title":"4.2.3 - You can use each marker symbol in a template as many times as you want.","text":"Example <p>input: <pre><code>{\n    % #Sam# @sm\n    % #Sammy# @smy\n    $they/them\n    &amp; is a person\n}\n</code></pre></p> <p>templates: <pre><code>::@@::# ($) | [#&amp;]\n</code></pre></p> <p>result: <pre><code>::smsm::Sam (they/them) | [Sam is a person]\n::smysmy::Sammy (they/them) | [Sammy is a person]\n</code></pre></p>"},{"location":"index.html#424-you-can-use-a-backslash-aka-an-escape-character-to-use-marker-symbols-without-them-being-replaced","title":"4.2.4 - You can use a backslash <code>('\\')</code>, aka an \"escape character\", to use marker symbols without them being replaced.","text":"Example <p>input: <pre><code>{\n    % #Sam# @sm\n    % #Sammy# @smy\n    $they/them\n    &amp;a person\n}\n</code></pre></p> <p>templates: <pre><code>::\\@@::# ($) | [\\#&amp;]\n</code></pre></p> <p>result: <pre><code>::@sm::Sam (they/them) | [#a person]\n::@smy::Sammy (they/them) | [#a person]\n</code></pre></p>"},{"location":"index.html#425-templates-files-can-have-as-many-templates-as-you-want","title":"4.2.5 - Templates files can have as many templates as you want.","text":"<p>Although templates dont have to be unique, repeating a template will generate duplicate macros, which could break the generated script.</p> Example <p>input: <pre><code>{\n    % #Sam# @sm\n    % #Sammy# @smy\n    $they/them\n    &amp;-- a person\n}\n{\n    % #Alex# @ax\n    $it/its\n    &amp;[a person too]\n}\n{\n    % #Raven# @rvn\n    $thon/thons&gt;they/them\n}\n{\n    % #Beck# @bk\n}\n</code></pre></p> <p>templates: <pre><code>::\\@@::#\n::\\@@-::# ($)\n::&lt;\\@@&gt;::# ($) | [&amp;]\n</code></pre></p> <p>result: <pre><code>::@sm::Sam\n::@sm-::Sam (they/them)\n::&lt;@sm&gt;::Sam (they/them) | [-- a person]\n\n::\\@smy::Sammy\n::\\@smy-::Sammy (they/them)\n::@smy::Sammy (they/them) | [-- a person]\n\n::\\@ax::Alex\n::\\@ax-::Alex (it/its)\n::@ax::Alex (it/its) | [[a person too]]\n\n::\\@rvn::Raven\n::\\@rvn-::Raven (thon/thons&gt;they/them)\n::@rvn::Raven (thon/thons&gt;they/them) || []\n\n::\\@bk::Beck\n::\\@bk-::Beck ()\n::@bk::Beck () || []\n</code></pre></p>"},{"location":"index.html#43-running-the-tool","title":"4.3 - running the tool","text":""},{"location":"index.html#431-call-the-executable-exe-file-via-command-line-to-run-it","title":"4.3.1 - Call the executable (.exe file) via command line to run it.","text":"<p>It's easier to write a batch script (.bat file) to do this for you (see below for how to do this). If you call it with no arguments, it will show helptext explaining how to use it.</p> Example <pre><code>C:\\path\\to\\tool\\folder\\PluralityUtilities&gt; PluralityUtilities.exe\n</code></pre>"},{"location":"index.html#432-in-order-to-generate-an-autohotkey-script-with-the-tool-you-need-an-input-file-and-a-templates-file-see-above-for-how-to-write-them","title":"4.3.2 - In order to generate an AutoHotkey script with the tool, you need an input file and a templates file (see above for how to write them).","text":"<p>Pass the path to the input file as the first argument (arg0), the path to the templates file as the second argument (arg1), and the path to where you want the output file to be generated as the third argument (arg2).</p> <p>You must include the file extensions for the input and templates files, but the extension on the output file will be ignored and is optional.</p> <p>Important</p> <p>If you pass the path to an existing output file, it will be overwritten.</p> Example <pre><code>C:\\path\\to\\tool\\folder\\PluralityUtilities&gt; PluralityUtilities.exe C:\\path\\to\\input\\file\\input.txt C:\\path\\to\\templates\\file\\templates.txt C:\\path\\to\\output\\file\\output\n</code></pre>"},{"location":"index.html#433-if-you-dont-like-having-to-get-the-full-path-for-files-you-can-use-relative-paths-instead","title":"4.3.3 - If you dont like having to get the full path for files, you can use relative paths instead.","text":"<p><code>./</code> gets the folder the .exe file is in, and <code>../</code> gets the parent folder of that folder.</p> Example <p>folder contents: <pre><code>- parent/\n- PluralityUtilities/\n    - output.ahk (will be generated after running)\n    - PluralityUtilities.exe\n- input.txt\n- templates.txt\n</code></pre></p> <p>in command prompt: <pre><code>C:\\path\\to\\parent\\PluralityUtilities&gt; PluralityUtilities.exe ../input.txt ../templates.txt ./output\n</code></pre></p>"},{"location":"index.html#434-a-note-about-slashes-in-paths","title":"4.3.4 - A note about slashes in paths:","text":"<p>On Windows, backslashes ( <code>\\</code> ) and forward slashes ( <code>/</code> ) both work the same way. Use whichever you prefer to. These are not equivalent in the input and template files, however.</p>"},{"location":"index.html#435-you-can-pass-just-a-filename-for-the-output-file-and-it-will-be-generated-in-a-default-location","title":"4.3.5 - You can pass just a filename for the output file and it will be generated in a default location.","text":"<p>If you pass a filename with no path, the file will be generated in a folder called <code>_output</code> inside the tool's folder.</p> Example <p>folder contents: <pre><code>- parent/\n- PluralityUtilities/\n    - _output\\\n    - output.ahk (will be generated after running)\n    - PluralityUtilities.exe\n- input.txt\n- templates.txt\n</code></pre></p> <p>in command prompt: <pre><code>C:\\path\\to\\parent\\PluralityUtilities\\\n&gt;PluralityUtilities.exe ../input.txt ../templates.txt output\n</code></pre></p>"},{"location":"index.html#436-optionally-you-can-pass-a-fourth-argument-to-enable-logging","title":"4.3.6 - Optionally, you can pass a fourth argument to enable logging.","text":"<p>Pass <code>-l</code> as the fourth argument (arg3) to enable logging in basic mode (writes log info to log file only), or <code>-v</code> to enable logging in verbose mode (writes log info to log file and to the console window).</p> <p>Log files are found in a folder called <code>_log</code> inside the tool's folder. Log file names are automatically generated using the date and time when the tool is run.</p> Example <p>folder contents: <pre><code>- parent\\\n- PluralityUtilities\\\n    - _log\n    - yyyy-MM-dd_HH-mm-ss.log (will be generated after running)\n    - PluralityUtilities.exe\n- input.txt\n- output.txt\n- templates.txt\n</code></pre></p> <p>in command prompt: <pre><code>C:\\path\\to\\parent\\folder\\PluralityUtilities\\\n&gt;PluralityUtilities.exe ../input.txt ../templates.txt ../output -l\n</code></pre></p>"},{"location":"index.html#437-you-can-make-a-batch-script-bat-file-to-run-the-tool-for-you","title":"4.3.7 - You can make a batch script (.bat file) to run the tool for you.","text":"<p>If you're going to run the tool with the same arguments every time, it's much simpler to write a simple .bat file to run the tool for you.</p>"},{"location":"index.html#4371-make-a-new-text-file-name-it-whatever-you-want-and-change-its-extension-to-bat","title":"4.3.7.1 - Make a new text file, name it whatever you want, and change its extension to .bat.","text":"<p>You can also open it in a text editor such as Notepad and use <code>save as \u2192 Batch file</code> to do the same thing.</p>"},{"location":"index.html#4372-open-the-file-in-a-text-editor-program-such-as-notepad","title":"4.3.7.2 - Open the file in a text editor program, such as Notepad.","text":""},{"location":"index.html#4373-in-the-file-put-in-the-command-usage-as-shown-above-then-save-it","title":"4.3.7.3 - In the file, put in the command usage as shown above, then save it.","text":"Example <p>folder contents: <pre><code>- parent\\\n- PluralityUtilities\\\n    - _log\\\n    - (log files will be generated here after running the tool if logging is enabled)\n    - PluralityUtilities.exe\n- example batch file.bat\n- input.txt\n- templates.txt\n- output.ahk (will be generated after running the tool)\n</code></pre></p> <p>in file \"example batch file.bat\": <pre><code>PluralityUtilities/PluralityUtilities.exe ./input.txt ./templates.txt ./output -v\n</code></pre></p>"},{"location":"index.html#4374-once-youve-done-all-that-run-the-bat-file-by-double-clicking-it","title":"4.3.7.4 - Once you've done all that, run the .bat file by double clicking it.","text":"<p>Assuming the .bat file was made correctly, it will run PluralityUtilities with all the arguments you set.</p>"},{"location":"index.html#44-using-the-script-generated-by-pluralityutilities","title":"4.4 - using the script generated by PluralityUtilities","text":""},{"location":"index.html#441-before-you-can-do-anything-with-your-script-you-need-to-install-autohotkey","title":"4.4.1 - Before you can do anything with your script, you need to install AutoHotkey.","text":"<p>Download it here and install it, then continue.</p>"},{"location":"index.html#442-now-that-autohotkey-is-installed-you-need-to-run-the-script","title":"4.4.2 - Now that AutoHotkey is installed, you need to run the script.","text":"<p>Either double-click the .ahk file or right click on it and click \"run script\" in the dropdown menu.</p>"},{"location":"index.html#443-having-to-launch-the-script-every-time-you-boot-your-computer-can-get-annoying","title":"4.4.3 - Having to launch the script every time you boot your computer can get annoying.","text":"<p>If you get sick of it, you can follow the directions here to make it run automatically. It might still sometimes fail to launch, but it works the majority of the time.</p>"},{"location":"index.html#5-i-think-i-found-a-bug-i-have-an-idea-for-the-project","title":"5 - i think i found a bug / i have an idea for the project","text":"<p>Report bugs and make suggestions here: GitHub issues board</p> <p>If there's a dead link in this documentation, please report it so it can be fixed.</p> <p>In order for developers to find bugs easier, please describe what you were doing in as much detail as you're able to (even better, write steps to reproduce the issue), say what you expected to happen, say what actually happened, and if you can, include the log file.</p>"},{"location":"about/changelog.html","title":"Changelog - About","text":"Changelog"},{"location":"about/changelog.html#070","title":"0.7.0","text":"<p>General</p> <ul> <li>Ignore blank lines in input files.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Add byte-order mark to output file headers.</li> </ul>"},{"location":"about/changelog.html#061","title":"0.6.1","text":"<p>General</p> <ul> <li>Update documentation (forgotten in previous version).</li> </ul>"},{"location":"about/changelog.html#060","title":"0.6.0","text":"<p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Add note about using escape characters on backslashes and update example in documentation.</li> <li>Add SingleInstance AutoHotkey parameter to output scripts.</li> </ul> <p>Bugfixes</p> <ul> <li>Fix 31 - results portion of example in section 4.2.5 of documentation should not have backslashes.</li> </ul>"},{"location":"about/changelog.html#050","title":"0.5.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Add unit tests.</li> <li>Add documentation.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Replace hard-coded templates with user-provided template file.</li> <li>Remove <code>.akf</code> file extension restriction for input files.</li> <li>Add support for escape characters in templates.</li> </ul>"},{"location":"about/changelog.html#040","title":"0.4.0","text":""},{"location":"about/changelog.html#030","title":"0.3.0","text":""},{"location":"about/changelog.html#020","title":"0.2.0","text":""},{"location":"about/changelog.html#010","title":"0.1.0","text":"<p>General</p> <ul> <li>Initial release.</li> </ul>"}]}