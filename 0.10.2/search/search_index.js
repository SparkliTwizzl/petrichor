var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Petrichor /\u02c8p\u025btr\u026a\u02cck\u0254\u02d0r/ (noun) The scent of damp earth, particularly after rain. Part of the Trioxichor project. Petrichor Version 0.10.0 <p>Important</p> <p>This is legacy documentation, provided as-is.</p> <p>This version of the project is no longer supported or maintained.</p>"},{"location":"index.html#1-what-is-it","title":"1 - What is it?","text":"<p>This tool is a command-line app with miscellaneous utilities. Currently wi're the only maintainer, so currently it only has stuff that wi feel the need to add to it.</p>"},{"location":"index.html#2-what-does-it-do","title":"2 - What does it do?","text":"<p>Petrichor consists of modules for performing various utilities.</p> <p>Modules:</p> <ul> <li>Text Shortcut Script Generation</li> </ul>"},{"location":"index.html#3-autohotkey-whats-that","title":"3 - AutoHotkey? What's that?","text":"<p>The scripts generated by the tool do nothing on their own. They are intended to be run with AutoHotkey, a Windows scripting tool intended for automation, and without it, they're just a glorified text file.</p>"},{"location":"index.html#4-how-do-i-use-it","title":"4 - How do i use it?","text":"<p>In order to get a useful result from the tool, there are 3 main steps:</p> <ol> <li>Write an input file using Petrichor Script.</li> <li>Run the tool using the above.</li> <li>Run the resulting script with AutoHotkey.</li> </ol>"},{"location":"index.html#41-petrichor-script-syntax-and-usage","title":"4.1 - Petrichor Script syntax and usage","text":"<p>Petrichor Script is made up of data regions, which are made up of tokens. Some are required and some are optional.</p>"},{"location":"index.html#411-data-tokens-and-regions","title":"4.1.1 - Data tokens and regions","text":"<p>All data in Petrichor input files is in the form of data tokens, which can be grouped into data regions.</p>"},{"location":"index.html#4111-data-tokens","title":"4.1.1.1 - Data tokens","text":"<p>The most basic element in input files is a data token, or simply a token.</p> <p>Every token consists of a name and a value, separated by a <code>:</code>. Whitespace between and around these parts is ignored.</p> <p>Token names are always in <code>lower-kebab-case</code>.</p> Example <p>both tokens are identical to Petrichor <pre><code>token-name:Token value.\ntoken-name : Token value. \n</code></pre></p>"},{"location":"index.html#4112-data-regions","title":"4.1.1.2 - Data regions","text":"<p>Related tokens can be grouped into a data region, or simply a region. These consist of a token indicating the start of the region, then the region body, surrounded by brackets <code>{</code> / <code>}</code>.</p> Example <pre><code>region-name:\n{\n    token-1-in-region-body: Value.\n    token-2-in-region-body: Value.\n}\n</code></pre> <p>Regions can be contained within another region.</p> Example <pre><code>parent-region:\n{\n    token-a: Value.\n\n    child-region:\n    {\n        token-b: Value.\n    }\n}\n</code></pre>"},{"location":"index.html#412-blank-lines-and-comments","title":"4.1.2 - Blank lines and comments","text":"<p>The token <code>//</code> starts a comment which continues to the end of the line. The comment token is the only token which can be on the same line as other data.</p> <p>Blank lines are ignored.</p> Example <pre><code>// this is a comment. this line will be ignored. the following line is blank, and will also be ignored.\n\nregion:\n{\n    token: value // this is an inline comment. everything after \"//\" will be ignored.\n}\n</code></pre>"},{"location":"index.html#413-escape-characters","title":"4.1.3 - Escape characters","text":"<p>Backslash <code>\\</code> is treated as an \"escape character\" in some cases. It is used to disable the normal function of special characters. An escape character can be applied to another escape character in order to make the scond one print literally.</p> Example <pre><code>do-something: @blah // this hypothetical token treats @ as a special character and changes it.\ndo-something: \\@blah // but in this case, it will be left as-is, since the @ is escaped.\n</code></pre>"},{"location":"index.html#42-supported-tokens","title":"4.2 - Supported tokens","text":""},{"location":"index.html#421-metadata-region-required","title":"4.2.1 - Metadata region (REQUIRED)","text":"<p>This region contains required information for Petrichor to run, and it must be the first region in the file regardless of what module is used.</p>"},{"location":"index.html#4211-minimum-version-token-required","title":"4.2.1.1 - Minimum version token (REQUIRED)","text":"<p>This token is required. It specifies the minimum Petrichor version required in order to parse the file.</p> Example <pre><code>metadata:\n{\n    minimum-version: major.minor.patch.preview\n}\n</code></pre> <p>Major and minor version must be specified. If patch or patch and preview versions are blank, they are assumed to be any version.</p> Example <pre><code>minimum-version: 1.2.3.pre-4 // Major version 1, minor version 2, patch version 3, preview version pre-4\nminimum-version: 1.2.3 // Major version 1, minor version 2, patch version 3, any preview version\nminimum-version: 1.2 // Major version 1, minor version 2, any patch or preview version\n</code></pre>"},{"location":"index.html#4212-command-token-optional","title":"4.2.1.2 - Command token (OPTIONAL)","text":"<p>This token is optional. It allows you to specify the command to run in your input file for Petrichor to handle automatically.</p> <p>Set the token's value to the command to be run.</p> <p>To use command options, add a region body to the token and put options into it as tokens, converting the option names to <code>kebab-case</code> and setting the tokens' values to the command option values.</p> Example <pre><code>metadata:\n{\n    minimum-version: {version number}\n    command: commandName\n    {\n        command-option-1: value1\n        command-option-2: value2\n    }\n}\n</code></pre> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe --inputFile input.txt\n</code></pre> <p>This is equivalent to the following: <pre><code>metadata:\n{\n    minimum-version: {version number}\n}\n</code></pre></p> <pre><code>[install path]\\Petrichor&gt; &gt;Petrichor.exe commandName --inputFile input.txt --commandOption1 value1 --commandOption2 value2\n</code></pre>"},{"location":"index.html#422-module-options-region-optional","title":"4.2.2 - Module options region (OPTIONAL)","text":"<p>This region is optional. It allows you to configure module-specific options, if supported by a module. Each module that supports this region will have its own version of it. See the relevant module's documentation for more information.</p>"},{"location":"index.html#423-module-specific-tokens","title":"4.2.3 - Module-specific tokens","text":"<p>Most modules have tokens that are specific to their functions. See the relevant module's documentation for information about its tokens.</p>"},{"location":"index.html#43-running-the-tool","title":"4.3 - Running the tool","text":"<p>Call the executable (<code>.exe</code> file) via command line to run it.</p> <p>It may be easier to write a batch script (<code>.bat</code> file) to do this for you (see below for how to do this). If you call it with no arguments, it will show helptext explaining how to use it.</p> Example <pre><code>[install path]\\Petrichor&gt; Petrichor.exe\n</code></pre>"},{"location":"index.html#431-commands","title":"4.3.1 - Commands","text":"<p>Petrichor modules each have a corresponding command to trigger them. These can be given as command line arguments or they can be put into your input file and Petrichor will attempt to read ane execute them automatically.</p>"},{"location":"index.html#4311-default-command","title":"4.3.1.1 - Default command","text":"<p>If you call Petrichor with no arguments, you will be prompted to use the <code>--help</code> option to see available commands.</p> <p>You can call Petrichor without passing it a command if you put the command in your input file and pass the input file as an argument when you run Petrichor. (You can also just drag-and-drop the input file onto the <code>.exe</code> file.)</p> Example <p>Input file contents:</p> <pre><code>metadata\n{\n    minimum-version: {version number}\n    command: commandName\n    {\n        command-option-1: value1\n        command-option-2: value2\n    }\n}\n</code></pre> <p>Command line usage:</p> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe [path]\\input.txt\n</code></pre>"},{"location":"index.html#432-command-options","title":"4.3.2 - Command options","text":"<p>Most commands can have their behavior modified with options. </p>"},{"location":"index.html#4321-inputfile-option-optional","title":"4.3.2.1 - <code>--inputFile</code> option (OPTIONAL)","text":"<p>Add the <code>--inputFile</code> option to a command and pass the input file argument after it.</p> <p>You can specify the input file directory and/or name. If you only provide the directory, <code>input.petrichor</code> will be used as the file name. If you only provide the file name, <code>{install path}\\Petrichor\\</code> will be used as the directory.</p> <p>You must include the file extension if you provide a file name. Relative file paths can be used.</p> Example Full file pathDirectory only, default file nameFile name only, default directory <p><pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --inputFile \"[path]\\inputFile.txt\"\n</code></pre> Petrichor will look for <code>{path}\\inputFile.txt</code>.</p> <p><pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --inputFile \"[path]\\\"\n</code></pre> Petrichor will look for <code>{path}\\input.petrichor</code>.</p> <p><pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --inputFile \"inputFile.txt\"\n</code></pre> Petrichor will look for <code>{install path}\\Petrichor\\inputFile.txt</code>.</p>"},{"location":"index.html#4322-outputfile-option-optional","title":"4.3.2.2 - <code>--outputFile</code> option (OPTIONAL)","text":"<p>Add the <code>--outout</code> option to a command which generates a file and pass the output file argument after it.</p> <p>You can specify the file directory and/or name. If you only provide the directory, <code>output.ahk</code> will be used as the file name. If you only provide the file name, <code>{install path}\\Petrichor\\_output\\</code> will be used as the directory.</p> <p>A file extension is not required, and if one is included it will be replaced automatically. Relative file paths can be used.</p> Example Full file pathDirectory only, default file nameFile name only, default directory <pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --outputFile \"C:\\path\\to\\output\\file\\outputFile\"\n</code></pre> <p>RESULT:</p> <pre><code>C:\\path\\to\\output\\file\\outputFile.ext \u2190 will be generated by Petrichor\n</code></pre> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --outputFile \"outputFile\"\n</code></pre> <p>RESULT:</p> <pre><code>{install path}\\Petrichor\\_output\\outputFile.ext \u2190 will be generated by Petrichor\n</code></pre> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --outputFile \"{path}\\output\\\"\n</code></pre> <p>RESULT:</p> <pre><code>{path}\\output\\output.ext \u2190 will be generated by Petrichor\n</code></pre>"},{"location":"index.html#4323-logmode-option-optional","title":"4.3.2.3 - <code>--logMode</code> option (OPTIONAL)","text":"<p>This option is used to control where logs are sent.</p> <p>Values for this option are:</p> <ul> <li><code>all</code> (DEFAULT) - Send logs to all output locations.</li> <li><code>fileOnly</code> - Send logs only to log file.</li> <li><code>consoleOnly</code> - Send logs only to console output.</li> <li><code>none</code> - Disable logging.</li> </ul>"},{"location":"index.html#4324-logfile-option-optional","title":"4.3.2.4 - <code>--logFile</code> option (OPTIONAL)","text":"<p>This option is used to customize the file name and/or location to generate a log file at.</p> <p>Note</p> <p>Log file will only be created if logging to file is enabled (see 4.3.3.3).</p> Example Full file pathDirectory only, default file nameFile name only, default directory <pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --logFile logFile.txt\n</code></pre> <p>RESULT:</p> <pre><code>{path}/Petrichor/_log/logFile.txt \u2190 will be generated by Petrichor\n</code></pre> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --logMode all --logFile [log path]/\n</code></pre> <p>RESULT:</p> <pre><code>{log path}/{yyyy}-{MM}-{dd}_{HH}-{mm}-{ss}.log \u2190 will be generated by Petrichor\n</code></pre> <pre><code>[install path]\\Petrichor&gt; Petrichor.exe commandName --logMode all --logFile [log path]/logFile.txt\n</code></pre> <p>RESULT:</p> <pre><code>{log path}/logFile.txt \u2190 will be generated by Petrichor\n</code></pre>"},{"location":"index.html#433-relative-file-paths","title":"4.3.3 - Relative file paths","text":"<p>If you dont like having to get the full path for files, you can use relative paths instead.</p> <p><code>./</code> gets the folder the .exe file is in, and <code>../</code> gets the parent folder of that folder.</p> Example <p>FOLDER CONTENTS:</p> <pre><code>- parent/\n    - Petrichor/\n        - outputFile.ext (will be generated after running)\n        - Petrichor.exe\n    - inputFile.txt\n</code></pre> <p>IN COMMAND PROMPT:</p> <pre><code>{install path}\\Petrichor\\\n&gt;Petrichor.exe commandName --inputFile ../inputFile.txt --outputFile ./outputFile\n</code></pre>"},{"location":"index.html#434-a-note-about-slashes-in-file-paths-on-windows","title":"4.3.4 - A note about slashes in file paths on Windows","text":"<p>On Windows, backslashes <code>\\</code> and forward slashes <code>/</code> both work the same way. Use whichever you prefer to. They are not equivalent to each other in input files, however.</p>"},{"location":"index.html#435-running-petrichor-via-batch-script-bat-file","title":"4.3.5 - Running Petrichor via batch script (<code>.bat</code> file)","text":"<p>If you're going to run the tool with the same arguments every time, it's much simpler to write a simple <code>.bat</code> file to run the tool for you.</p> <ol> <li>Make a new text file, name it whatever you want, and change its extension to <code>.bat</code>.<ul> <li>You can also open it in a text editor such as Notepad and use <code>save as \u2192 Batch file</code> to do the same thing.</li> </ul> </li> <li>Open the file in a text editor program, such as Notepad.</li> <li>Type <code>start {install path}/Petrichor.exe</code>, followed by command usage as shown above.</li> <li>Save the batch file.</li> </ol> <p>Note</p> <p>Relative paths are relative to the batch script by default. If relative paths are used in Petrichor commands, they must be relative to Petrichor.exe instead.</p> <p>Once you've done these steps, you can run the <code>.bat</code> file by double clicking it. Assuming the <code>.bat</code> file was made correctly, it will run Petrichor with all the arguments you set.</p> Example Command passed with command line argumentsCommand set in input file <p>FOLDER CONTENTS:</p> <pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n    - outputFile.ahk (will be generated after running)\n</code></pre> <p>IN FILE \"example batch file.bat\":</p> <pre><code>start Petrichor\\Petrichor.exe generateTextShortcutScript --inputFile ..\\inputFile.txt --outputFile ..\\outputFile\n</code></pre> <p>FOLDER CONTENTS:</p> <pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n    - outputFile.ahk (will be generated after running)\n</code></pre> <p>IN FILE \"example batch file.bat\":</p> <pre><code>start Petrichor\\Petrichor.exe --inputFile ..\\inputFile.txt\n</code></pre> <p>Optionally, you can make a batch script wait for Petrichor to finish running and launch the output script automatically.</p> <ol> <li>Create a batch script using the steps above.</li> <li>After the <code>start</code> keyword, add <code>/wait</code>. This will cause the batch script to wait until Petrichor is closed before continuing.</li> <li>Add a new line to the batch script, and enter <code>start [path/script.ahk]</code>.</li> <li>Save the batch file.</li> </ol> <p>Once you've done these steps, you can run the <code>.bat</code> file by double clicking it. Assuming the <code>.bat</code> file was made correctly, it will run Petrichor with all the arguments you set, wait until it closes, then launch the output script.</p> <p>Note</p> <p>If Petrichor fails to generate a new script, any existing version of the output script will be launched instead.</p> Example <p>FOLDER CONTENTS:</p> <pre><code>- parent\\\n    - Petrichor\\\n        - Petrichor.exe\n    - example batch file.bat\n    - inputFile.txt\n    - outputFile.ahk (will be generated after running)\n</code></pre> <p>IN FILE \"example batch file.bat\":</p> <pre><code>start /wait Petrichor\\Petrichor.exe generateTextShortcutScript --inputFile ..\\inputFile.txt --outputFile ..\\outputFile\nstart outputFile.ahk\n</code></pre>"},{"location":"index.html#5-module-specific-information","title":"5 - Module-specific information","text":""},{"location":"index.html#51-text-shortcut-script-generation-module","title":"5.1 - Text Shortcut Script Generation module","text":"<p>This module generates text shortcut scripts to replace short sequences of text (tags) with longer strings with names, pronouns, and similar information. These scripts can be written by hand, but learning how to use AutoHotkey is required, and they're hard to make changes to if you ever want to, for example, change your name or your pronouns.</p>"},{"location":"index.html#511-text-shortcut-script-generation-module-tokens","title":"5.1.1 - Text Shortcut Script Generation module tokens","text":"<p>This section details all the data tokens that are module-specific for the Text Shortcut Script Generation module.</p> <p>This information likely won't make sense unless you know how to use it first.</p>"},{"location":"index.html#5111-module-options-region-optional","title":"5.1.1.1 - Module options region (OPTIONAL)","text":"<p>This variant of the module options region includes options supported by the Text Shortcut Script Generation module.</p>"},{"location":"index.html#51111-custom-icon-tokens-optional","title":"5.1.1.1.1 - Custom icon tokens (OPTIONAL)","text":"<p>If desired, you can specify filepaths to custom icons for the shortcut script to use.</p> <p>Available tokens are:</p> <ul> <li><code>default-icon</code> : Min 0, max 1. This token allows setting a custom default icon for the script. Set value to the path to the icon file you want to use.</li> <li><code>suspend-icon</code> : Min 0, max 1. This token allows setting a custom icon for the script to use when suspended. Set value to the path to the icon file you want to use.</li> </ul> <p>Important</p> <p>If you move an icon file and do not update its path in your input file and regenerate the script, the icon will not be found by AutoHotkey and will not be applied.</p> Example <pre><code>module-options:\n{\n    default-icon: {path to default icon file}.ico\n    suspend-icon: {path to suspend icon file}.ico\n}\n</code></pre> <p>For simplicity, if an icon file will be in the same folder as the shortcut script, you can use a relative path.</p> Example <pre><code>module-options:\n{\n    default-icon: ./{default icon file name}.ico\n    suspend-icon: ./{suspend icon file name}.ico\n}\n</code></pre>"},{"location":"index.html#51112-reload-suspend-shortcut-tokens-optional","title":"5.1.1.1.2 - Reload / suspend shortcut tokens (OPTIONAL)","text":"<p>If desired, you can include keyboard shortcuts to reload and/or suspend the script.</p> <p>To include a shortcut to reload the script, add a token to the module options region with the name <code>reload-shortcut</code> and set its value to a valid AutoHotkey v2.0 shortcut string; If you do not know how to write one, consult AutoHotkey documentation. To make this easier, some find and replace strings are supported by Petrichor.</p> <p>To include a shortcut to suspend the script, do the same with a token named <code>suspend-shortcut</code>.</p> Example <pre><code>module-options:\n{\n    reload-shortcut: #r // Windows key + R\n    suspend-shortcut: #s // Windows key + S\n}\n</code></pre>"},{"location":"index.html#511121-shortcut-find-and-replace-strings","title":"5.1.1.1.2.1 - Shortcut find-and-replace strings","text":"<p>The following strings are supported:</p> <ul> <li><code>[windows]</code> / <code>[win]</code> \u2192 Windows key</li> <li><code>[alt]</code> \u2192 either Alt key</li> <li><code>[left-alt]</code> / <code>[lalt]</code> \u2192 left Alt key</li> <li><code>[right-alt]</code> / <code>[ralt]</code> \u2192 right Alt key</li> <li><code>[control]</code> / <code>[ctrl]</code> \u2192 either Control key</li> <li><code>[left-control]</code> / <code>[lctrl]</code> \u2192 left Control key</li> <li><code>[right-control]</code> / <code>[rctrl]</code> \u2192 right Control key</li> <li><code>[shift]</code> \u2192 either Shift key</li> <li><code>[left-shift]</code> / <code>[lshift]</code> \u2192 left Shift key</li> <li><code>[right-shift]</code> / <code>[rshift]</code> \u2192 right Shift key</li> <li><code>[and]</code> \u2192 <code>&amp;</code></li> <li><code>[alt-graph]</code> / <code>[altgr]</code> \u2192 AltGr (AltGraph) key</li> <li><code>[wildcard]</code> / <code>[wild]</code> \u2192 <code>*</code></li> <li><code>[passthrough]</code> / <code>[tilde]</code> \u2192 <code>~</code></li> <li><code>[send]</code> \u2192 <code>$</code></li> <li><code>[tab]</code> \u2192 Tab key</li> <li><code>[caps-lock]</code> / <code>[caps]</code> \u2192 CapsLock key</li> <li><code>[enter]</code> \u2192 Enter key</li> <li><code>[backspace]</code> / <code>[bksp]</code> \u2192 Backspace key</li> <li><code>[insert]</code> / <code>[ins]</code> \u2192 Insert key</li> <li><code>[delete]</code> / <code>[del]</code> \u2192 Delete key</li> <li><code>[home]</code> \u2192 Home key</li> <li><code>[end]</code> \u2192 End key</li> <li><code>[page-up]</code> / <code>[pgup]</code> \u2192 PageUp key</li> <li><code>[page-down]</code> / <code>[pgdn]</code> \u2192 PageDown key</li> <li><code>\\[</code> \u2192 <code>[</code></li> <li><code>\\]</code> \u2192 <code>]</code></li> </ul> Example <pre><code>module-options:\n{\n    reload-shortcut: [win]r // Windows key + R\n    suspend-shortcut: \\[win\\]s // [win]s\n}\n</code></pre>"},{"location":"index.html#5112-template-list-region-required","title":"5.1.1.2 - Template list region (REQUIRED)","text":"<p>This region defines the structure of generated macros. It must come after the entry list region.</p> <p>Templates define the structure of AutoHotkey macros to create from entries. There is no limit to how many templates can be used.</p>"},{"location":"index.html#51121-template-region-required","title":"5.1.1.2.1 - Template region (REQUIRED)","text":"<p>This region defines a template to create macros from. At least one this token must be present. If no optional features are used, the region body can be omitted.</p> <p>Templates are defined by tokens with the name <code>template</code> and a valid AutoHotkey hotstring. Consult AutoHotkey documentation if you do not know how to write one. A basic overview is provided here.</p> <p>All templates must start with a <code>find</code> text string, then <code>::</code>, then a <code>replace</code> text string.</p> <p>Note</p> <p>You cannot use <code>::</code> in a <code>find</code> string due to the way AutoHotkey hotstrings work. Petrichor will allow it, but the macros it generates will not work.</p> <p>These components can have whitespace between them, but note that this whitespace will be trimmed off unless you force it to be kept in by inserting a backtick <code>`</code> at the start or end of the <code>find</code> and/or <code>replace</code> strings.</p> <p>Use marker strings to define how templates should be applied to entries.</p> <p>Templates support custom find and replace dictionaries. </p> <p>If this is not followed, the generated script wont work correctly, even though Petrichor will run without errors.</p> Example <pre><code>template-list:\n{\n    template: [find string] :: ` [replace string] ` // no optional features are used, so no region body is needed\n    template: [find string] :: [replace string] // optional features are used, so a region body is needed\n    {\n        // optional feature tokens go here\n    }\n}\n\n// MACROS GENERATED FROM INPUT:\n\n::[find string]::` [replace string] ` // this is a standard template\n::[find string]::[replace string] // optional features will be applied to this template\n</code></pre>"},{"location":"index.html#511211-template-marker-strings","title":"5.1.1.2.1.1 - Template marker strings","text":"<p>Certain symbols will be replaced by fields from entries in the input file by default. This is how templates are able to be used to generate macros.</p> <p>If no marker strings are present, a template will be inserted into the output file with no changes for every <code>name</code> token present in the input file. This technically will not break the script, but it is not recommended.</p> <p>Available marker strings are:</p> <ul> <li><code>[color]</code></li> <li><code>[decoration]</code></li> <li><code>[id]</code></li> <li><code>[name]</code></li> <li><code>[last-name]</code></li> <li><code>[last-tag]</code></li> <li><code>[pronoun]</code></li> <li><code>[tag]</code></li> </ul> <p>Note</p> <p>Only these supported marker strings can be used. Unknown marker strings will be rejected.</p> <p>Note</p> <p>By default, you cannot use the <code>[</code> or <code>]</code> symbols in a template string. Use escape characters to circumvent this.</p> Example <pre><code>entry-list:\n{\n    entry:\n    {\n        id: 1234\n        name: Sam @sm\n        name: Sammy @smy\n        last-name: Smith @s\n        pronoun: they/them\n        color: #89abcd\n        decoration: -- a person\n    }\n}\n\ntemplate-list:\n{\n    template:  [tag][last-tag] :: [id] - [name] [last-name] ([pronoun]) | {[decoration]} | [color]\n}\n\n// MACROS GENERATED FROM INPUT:\n\n::sms::1234 - Sam Smith (they/them) | {-- a person} | #89abcd\n::smys::1234 - Sammy Smith (they/them) | {-- a person} | #89abcd\n</code></pre> <p>You can use each marker string in a template as many times as you want</p> Example <pre><code>entry-list:\n{\n    entry:\n    {\n        id: 1234\n        name: Sam @sm\n        name: Sammy @smy\n        last-name: Smith @s\n        pronoun: they/them\n        color: #89abcd\n        decoration: -- a person\n    }\n}\n\ntemplate-list:\n{\n    template: [tag][tag] :: [name] | {[name] [decoration]}\n}\n\n// MACROS GENERATED FROM INPUT:\n\n::smsm::Sam (they/them) | [Sam is a person]\n::smysmy::Sammy (they/them) | [Sammy is a person]\n</code></pre>"},{"location":"index.html#511212-find-and-replace-tokens-optional","title":"5.1.1.2.1.2 - Find and replace tokens (OPTIONAL)","text":"<p>These tokens are used to define custom find-and-replace pairs for a template.</p> <p>The find-and-replace pairs are only applied to the template's \"replace\" string. They are applied after a template is populated with entry data, and therefore are able to modify that data.</p> <p>\"Find\" keys are defined by a token with the name <code>find</code>. \"Replace\" values are defined by a token with the name <code>replace</code>.</p> <p>The value of a <code>find</code> or <code>replace</code> token must be an inline region body, starting with a <code>{</code> and ending with a <code>}</code>. Within the token body, put your find/replace items as a comma-separated list. The lists cannot contain blank items, and they must have the same number of items as each other.</p> <p>A <code>replace</code> token must be paired with a <code>find</code> token, and must come after it. A <code>find</code> token can be present without a paired <code>replace</code> token, but this will cause all the \"find\" items to be removed rather than replaced with other text.</p> Example <pre><code>template-list:\n{\n    template: [find string] :: [replace string] custom find 1, custom find 2\n    {\n        find: { custom find 1, custom find 2 } // These are the \"find\" keys.\n        replace: { replace 1, replace 2 } // These are the corresponding \"replace\" values.\n    }\n}\n\n// MACROS GENERATED FROM INPUT:\n\n::[find string]::[replace string] replace 1, replace 2 // If the \"find\" keys are present in the [replace string] values for an entry, they will be replaced as well.\n</code></pre>"},{"location":"index.html#511212-text-case-tokens-optional","title":"5.1.1.2.1.2 - Text Case tokens (OPTIONAL)","text":"<p>These tokens are used to change the text case of a template's \"replace\" string. Case conversion is applied after custom find-and-replace pairs.</p> <p>Text case is defined by a token with the name <code>text-case</code>. Allowed values are: - unchanged (as-written; default) - upper (UPPER CASE) - lower (lower case) - firstCaps (First Capitals Case)</p> Example <pre><code>template-list:\n{\n    template: [find string] :: [replace String]\n    {\n        text-case: unchanged\n    }\n    template: [find string] :: [replace String]\n    {\n        text-case: upper\n    }\n    template: [find string] :: [replace String]\n    {\n        text-case: lower\n    }\n    template: [find string] :: [replace String]\n    {\n        text-case: firstCaps\n    }\n}\n\n// MACROS GENERATED FROM INPUT:\n\n::[find string]::[replace String]\n::[find string]::[REPLACE STRING]\n::[find string]::[replace string]\n::[find string]::[Replace String]\n</code></pre>"},{"location":"index.html#5113-entry-list-region-required","title":"5.1.1.3 - Entry list region (REQUIRED)","text":"<p>This region defines the entries to be converted into macros.</p> <p>Each entry is an <code>entry</code> region which defines a set of values to create shortcut macros from. There is no limit to how many entries the <code>entry-list</code> region can contain.</p>"},{"location":"index.html#51131-entry-regions-optional","title":"5.1.1.3.1 - Entry regions (OPTIONAL)","text":"<p>This region defines a set of data to apply macro templates to. At least one of this region must be present.</p> <p>Entry regions are made up several token types. There are different restrictions and requirements for each type.</p> <ul> <li><code>color</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.</li> <li><code>decoration</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.</li> <li><code>id</code> : Min 1, max 1. This token defines a value to associated with all <code>name</code> tokens that are present.</li> <li><code>name</code> : Min 1. This token defines a name/tag pair.<ul> <li>This token type's value is structured as <code>[name] @[tag]</code>, where the <code>[name]</code> portion can be any non-blank string that does not contain an <code>@</code> character, and the <code>[tag]</code> portion can be any string that does not contain whitespace.</li> </ul> </li> <li><code>last-name</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.<ul> <li>This token type's value structure is identical to that of <code>name</code> tags.</li> </ul> </li> <li><code>pronoun</code> : Min 0, max 1. This token defines a value to associate with all <code>name</code> tokens that are present.</li> </ul> <p>Note</p> <p>All token values should be unique, even though Petrichor wont take issue with it. If a value is repeated, the AutoHotkey script generated from the input data will misbehave in unpredictable ways.</p> Example <pre><code>entry: // all optional tokens present\n{\n    id: 1234\n    name: Sam @sm\n    name: Sammy @smy\n    last-name: Smith @s\n    pronoun: they/them\n    color: #89abcd\n    decoration: -- a person\n}\n\nentry: // only required tokens present\n{\n    id: 4321\n    name: ALEX @AX\n}\n</code></pre>"},{"location":"index.html#512-generatetextshortcutscript-command","title":"5.1.2 - <code>generateTextShortcutScript</code> command","text":"<p>To generate a text hotstring shortcut script, call Petrichor with the command argument <code>generateTextShortcutScript</code>.</p> <p>This command supports the following options:</p> <ul> <li>--inputFile</li> <li>--outputFile</li> <li>--logMode</li> <li>--logFile</li> </ul> Example <pre><code>{install path}\\Petrichor\\\n&gt;Petrichor.exe generateTextShortcutScript --inputFile {file} --outputFile {file} --logMode {mode} --logFile {file}\n</code></pre>"},{"location":"index.html#6-using-the-script-generated-by-petrichor","title":"6 - Using the script generated by Petrichor","text":""},{"location":"index.html#61-install-autohotkey","title":"6.1 - Install AutoHotkey","text":"<p>Before you can do anything with your script, you need to install AutoHotkey. Download and install AutoHotkey v2 here and install it, then continue.</p>"},{"location":"index.html#62-running-the-script","title":"6.2 - Running the script","text":"<p>Either double-click the .ahk file or right click on it and click \"run script\" in the dropdown menu.</p>"},{"location":"index.html#63-methods-to-launch-the-script-automatically","title":"6.3 - Methods to launch the script automatically","text":"<p>If you get sick of launching a script manually, there are a few options.</p>"},{"location":"index.html#631-windows-startup-shortcut-recommended","title":"6.3.1 - Windows Startup shortcut (RECOMMENDED)","text":"<p>This is the simplest method. It's not totally reliable, but it works the majority of the time. Occasionally a script will launch successfully, but not show up in the taskbar tray. If that bothers you, just relaunch the script manually.</p> <p>Here's how to do it:</p> <ol> <li>Right-click the script in File Explorer.</li> <li>Click <code>Create shortcut</code> in the dropdown menu.</li> <li>Press <code>Win+R</code> to open the Windows Run dialog.</li> <li>Type <code>shell:startup</code> into the dialog, then click OK.</li> <li>The Startup folder will open. Copy the shortcut you created in step 2 into it.</li> </ol>"},{"location":"index.html#632-task-scheduler","title":"6.3.2 - Task Scheduler","text":"<p>Wi've found this method to be less reliable than the Windows Startup method, but it does work more often than not. It's also kind of a pain to set up. Wi recommend using the Windows Startup method over this one, unless that method doesnt work for you.</p> <p>You can follow the directions here to set it up.</p>"},{"location":"index.html#633-registry-not-recommended","title":"6.3.3 - Registry (NOT RECOMMENDED)","text":"<p>DO NOT DO THIS UNLESS YOU KNOW WHAT YOU'RE DOING. Editing the registry can brick your computer if you're not careful.</p> <p>Wi strongly recommend using one of the other methods above, unless all of them dont work for you.</p> <p>Also, wi havent personally tested this method, so wi dont know how reliable it is, but it probably should work about the same as the other two?</p> <ol> <li>Open the Registry Editor. There are two days to do this:<ul> <li>Press <code>Win+R</code> to open the Run dialog, type in <code>regedit</code>, then click OK.</li> <li>Open the Start menu and search for either <code>regedit</code> or <code>Registry Editor</code>.</li> </ul> </li> <li>Navigate to <code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code>.</li> <li>Add a new String key. Name it however you prefer.</li> <li>Edit the value of the new string key and put in <code>\"@:\\path\\to\\autohotkey\\version\\file.exe\" \"@:\\path\\to\\script\\file.ahk\"</code>, using the filepaths of your AutoHotkey installation and your script file.</li> </ol>"},{"location":"index.html#7-i-think-i-found-a-bug-i-have-an-idea-for-the-project","title":"7 - I think i found a bug / I have an idea for the project","text":"<p>Report bugs and make suggestions here: GitHub issues board</p> <p>If there's a dead link in this documentation, please report it so it can be fixed.</p> <p>In order for developers to find bugs easier, please describe what you were doing in as much detail as you're able to (even better, write steps to reproduce the issue), say what you expected to happen, say what actually happened, and if you can, include the log file.</p>"},{"location":"about/changelog.html","title":"Changelog - About","text":"Changelog"},{"location":"about/changelog.html#0102","title":"0.10.2","text":"<p>Bugfixes</p> <ul> <li>Fix 201 - custom template find and replace is applied to template find strings.</li> </ul>"},{"location":"about/changelog.html#0101","title":"0.10.1","text":"<p>Text Shortcut Script Generation module</p> <ul> <li>Add missing log info messages.</li> </ul> <p>Bugfixes</p> <ul> <li>Fix 187 - escaping comments does not work.</li> <li>Fix 188 - command file option values in quotes are parsed incorrectly.</li> </ul>"},{"location":"about/changelog.html#0100","title":"0.10.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Change license to AEL-NC-AT 1.0.</li> <li>Change logo.</li> <li>Change line comment start sequence from <code>#:</code> to <code>//</code>.</li> <li>Add <code>command</code> token to allow putting commands and command options in input files.</li> <li>Add input file line numbers to log messages.</li> <li>Set window title.</li> </ul> <p>Text Shortcut Script Generation module</p> <ul> <li>Add default behavior for <code>output file</code> and <code>log file</code> command options.</li> <li>Add support for changing text case of templates.</li> <li>Add support for custom find-and-replace dictionaries in templates.</li> </ul> <p>Bugfixes</p> <ul> <li>Fix 165 - escaped escape characters are incorrectly removed.</li> </ul>"},{"location":"about/changelog.html#091","title":"0.9.1","text":"<p>Bugfixes</p> <ul> <li>Fix 157 - templates region is parsed multiple times and fails.</li> </ul>"},{"location":"about/changelog.html#090","title":"0.9.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Change logo.</li> <li>Change <code>metadata</code> token to <code>module-options</code>.</li> <li>Add new <code>metadata</code> token for other purposes.</li> <li>Add support for line comments in input files.</li> <li>Update and improve documentation.</li> <li>Improve logging.</li> </ul> <p>Text Shortcut Script Generation module</p> <ul> <li>Change command from <code>generateAHKShortcutScript</code> to <code>generateTextShortcutScript</code>.</li> <li>Add find-and-replace table to simplify syntax for <code>reload-shortcut</code> and <code>suspend-shortcut</code> token values.</li> <li>Simplify <code>template</code> token structure.</li> <li>Add <code>id</code> token to <code>entry</code> token body.</li> <li>Add <code>last-name</code> token to <code>entry</code> token body.</li> <li>Add <code>color</code> token to <code>entry</code> token body.</li> <li>Add methods to automatically launch shortcut scripts to documentation.</li> </ul>"},{"location":"about/changelog.html#080","title":"0.8.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Rename project from <code>PluralityUtilities</code> to <code>Petrichor</code>.</li> <li>Add icon.</li> <li>Add command line option to specify log file.</li> <li>Improve logging.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Change output script language from <code>AutoHotkey v1</code> to <code>AutoHotkey v2</code>.</li> <li>Combine input and template files into a single input file.</li> <li>Add \"generated by\" message to output file headers.</li> <li>Add support for custom <code>default</code> and <code>suspend</code> icons.</li> <li>Add support for <code>reload</code> and <code>suspend</code> keyboard shortcuts.</li> </ul>"},{"location":"about/changelog.html#070","title":"0.7.0","text":"<p>General</p> <ul> <li>Ignore blank lines in input files.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Add byte-order mark to output file headers.</li> </ul>"},{"location":"about/changelog.html#061","title":"0.6.1","text":"<p>General</p> <ul> <li>Update documentation (forgotten in previous version).</li> </ul>"},{"location":"about/changelog.html#060","title":"0.6.0","text":"<p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Add note about using escape characters on backslashes and update example in documentation.</li> <li>Add SingleInstance AutoHotkey parameter to output scripts.</li> </ul> <p>Bugfixes</p> <ul> <li>Fix 31 - results portion of example in section 4.2.5 of documentation should not have backslashes.</li> </ul>"},{"location":"about/changelog.html#050","title":"0.5.0","text":"<p>Important</p> <p>This version has breaking changes and is not backward-compatible.</p> <p>General</p> <ul> <li>Add unit tests.</li> <li>Add documentation.</li> </ul> <p>AutoHotkey Shortcut Script Generation module</p> <ul> <li>Replace hard-coded templates with user-provided template file.</li> <li>Remove <code>.akf</code> file extension restriction for input files.</li> <li>Add support for escape characters in templates.</li> </ul>"},{"location":"about/changelog.html#040","title":"0.4.0","text":""},{"location":"about/changelog.html#030","title":"0.3.0","text":""},{"location":"about/changelog.html#020","title":"0.2.0","text":""},{"location":"about/changelog.html#010","title":"0.1.0","text":"<p>General</p> <ul> <li>Initial release.</li> </ul>"}]}